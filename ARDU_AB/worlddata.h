#include "player.h"

#ifndef WORLDDATA_H
#define WORLDDATA_H
/// The below code was generated by
/// the Arduventure World Editor
/// created by Gavin Atkin 2016-2017



const int PLAYER_START_X = 1824;
const int PLAYER_START_Y = 2160;

const unsigned char PROGMEM chunks[] = 
{
   // number of chunks: 65
   // number of tiles in chunks: 36
   // space used by chunks: 2340 bytes
   // chunk: 0
   // chunk name: Grassland Borde
  0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
  0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
  0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
  0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
  0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
  0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   // chunk: 1
   // chunk name: Grasslands
  0x2D, 0x00, 0x01, 0x00, 0x2D, 0x2D, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x2D, 
  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x2D, 0x00, 0x02, 0x00, 0x00, 0x01, 
  0x2D, 0x2D, 0x00, 0x00, 0x01, 0x2D, 
   // chunk: 2
   // chunk name: Lonley tree
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x23, 0x24, 0x00, 0x00, 
  0x00, 0x00, 0x26, 0x25, 0x01, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 
   // chunk: 3
   // chunk name: Long Road
  0x00, 0x01, 0x00, 0x01, 0x23, 0x24, 
  0x02, 0x00, 0x01, 0x0C, 0x26, 0x25, 
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x01, 0x0C, 0x23, 0x24, 0x00, 0x01, 
  0x00, 0x01, 0x26, 0x25, 0x02, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x01, 0x0C, 
   // chunk: 4
   // chunk name: square
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x23, 0x30, 0x24, 0x00, 
  0x01, 0x00, 0x26, 0x31, 0x25, 0x00, 
  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
   // chunk: 5
   // chunk name: RSEmptyAll
  0x21, 0x0E, 0x0A, 0x0A, 0x0E, 0x22, 
  0x0E, 0x0D, 0x00, 0x0D, 0x0D, 0x0E, 
  0x0A, 0x0E, 0x0A, 0x02, 0x0D, 0x01, 
  0x00, 0x01, 0x0A, 0x0A, 0x00, 0x0A, 
  0x0E, 0x0E, 0x0A, 0x00, 0x0D, 0x0E, 
  0x22, 0x0E, 0x0A, 0x01, 0x0E, 0x21, 
   // chunk: 6
   // chunk name: RS0001
  0x21, 0x0E, 0x0A, 0x0F, 0x0E, 0x22, 
  0x0E, 0x0F, 0x00, 0x0D, 0x22, 0x21, 
  0x0A, 0x00, 0x0A, 0x0F, 0x21, 0x22, 
  0x00, 0x01, 0x0A, 0x0E, 0x0D, 0x21, 
  0x0E, 0x0D, 0x0A, 0x00, 0x0F, 0x22, 
  0x22, 0x0E, 0x0A, 0x01, 0x0E, 0x21, 
   // chunk: 7
   // chunk name: RS0010
  0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 
  0x0D, 0x21, 0x0D, 0x0D, 0x22, 0x0E, 
  0x0A, 0x0E, 0x0D, 0x0D, 0x0D, 0x0E, 
  0x00, 0x01, 0x0E, 0x0A, 0x00, 0x0A, 
  0x0E, 0x0D, 0x0A, 0x00, 0x0B, 0x0E, 
  0x22, 0x0E, 0x0A, 0x01, 0x0E, 0x21, 
   // chunk: 8
   // chunk name: RS0011
  0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 
  0x0A, 0x0D, 0x0E, 0x0D, 0x22, 0x21, 
  0x0A, 0x00, 0x0D, 0x0E, 0x0E, 0x22, 
  0x00, 0x01, 0x0A, 0x0A, 0x0D, 0x21, 
  0x0A, 0x0B, 0x0A, 0x00, 0x0F, 0x22, 
  0x0A, 0x0A, 0x0A, 0x01, 0x0A, 0x21, 
   // chunk: 9
   // chunk name: RS0100
  0x21, 0x0E, 0x0A, 0x0A, 0x0E, 0x22, 
  0x22, 0x0F, 0x00, 0x0E, 0x0E, 0x0D, 
  0x21, 0x0D, 0x0E, 0x0E, 0x0A, 0x01, 
  0x22, 0x21, 0x22, 0x0E, 0x00, 0x0A, 
  0x21, 0x22, 0x0D, 0x0E, 0x0F, 0x0E, 
  0x22, 0x0E, 0x0E, 0x01, 0x0E, 0x21, 
   // chunk: 10
   // chunk name: RS0101
  0x21, 0x22, 0x0E, 0x0A, 0x0E, 0x22, 
  0x22, 0x21, 0x0D, 0x0A, 0x0E, 0x21, 
  0x21, 0x0E, 0x0F, 0x0E, 0x0D, 0x22, 
  0x22, 0x0E, 0x0A, 0x0B, 0x21, 0x21, 
  0x21, 0x0D, 0x0A, 0x0A, 0x21, 0x22, 
  0x22, 0x0E, 0x0A, 0x0F, 0x0E, 0x21, 
   // chunk: 11
   // chunk name: RS0110
  0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 
  0x22, 0x21, 0x0F, 0x0F, 0x0D, 0x0E, 
  0x21, 0x0D, 0x0D, 0x0E, 0x0A, 0x01, 
  0x22, 0x0D, 0x0D, 0x0A, 0x00, 0x0A, 
  0x21, 0x0F, 0x0A, 0x00, 0x0F, 0x0E, 
  0x22, 0x0E, 0x0A, 0x01, 0x0D, 0x21, 
   // chunk: 12
   // chunk name: RS1000
  0x21, 0x0E, 0x0A, 0x0A, 0x0E, 0x22, 
  0x0E, 0x0D, 0x00, 0x0A, 0x0D, 0x0E, 
  0x0A, 0x00, 0x0A, 0x01, 0x0A, 0x01, 
  0x00, 0x01, 0x0F, 0x0E, 0x0E, 0x0E, 
  0x0E, 0x0F, 0x0D, 0x22, 0x21, 0x0E, 
  0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   // chunk: 13
   // chunk name: RS1001
  0x21, 0x0D, 0x0A, 0x0A, 0x0E, 0x22, 
  0x0E, 0x0F, 0x00, 0x0A, 0x0D, 0x21, 
  0x0A, 0x00, 0x0A, 0x01, 0x0E, 0x22, 
  0x00, 0x01, 0x0F, 0x0E, 0x0E, 0x21, 
  0x0E, 0x0F, 0x0D, 0x22, 0x21, 0x22, 
  0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   // chunk: 14
   // chunk name: RS1010
  0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 
  0x0E, 0x21, 0x0D, 0x0F, 0x0E, 0x0E, 
  0x0A, 0x0F, 0x0E, 0x01, 0x0A, 0x01, 
  0x00, 0x01, 0x0F, 0x0E, 0x0E, 0x0B, 
  0x0E, 0x0D, 0x0F, 0x22, 0x21, 0x0D, 
  0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   // chunk: 15
   // chunk name: RS1100
  0x21, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x22, 0x0D, 0x00, 0x0A, 0x00, 0x0A, 
  0x21, 0x0E, 0x0E, 0x01, 0x0A, 0x01, 
  0x22, 0x21, 0x0F, 0x0D, 0x0B, 0x0A, 
  0x21, 0x0F, 0x0D, 0x22, 0x21, 0x0A, 
  0x22, 0x21, 0x22, 0x21, 0x22, 0x0D, 
   // chunk: 16
   // chunk name: RS1000
  0x21, 0x0D, 0x0D, 0x0D, 0x21, 0x21, 
  0x0D, 0x0D, 0x21, 0x0D, 0x0D, 0x21, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x21, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x21, 0x0D, 0x0D, 
  0x21, 0x0D, 0x0D, 0x0D, 0x0D, 0x21, 
   // chunk: 17
   // chunk name: swamp house
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x0A, 0x29, 0x29, 0x29, 0x29, 0x0A, 
  0x0A, 0x29, 0x29, 0x29, 0x29, 0x0A, 
  0x0A, 0x2B, 0x2B, 0x2C, 0x2B, 0x0A, 
  0x0A, 0x03, 0x03, 0x03, 0x03, 0x0A, 
  0x0A, 0x0A, 0x0B, 0x04, 0x0A, 0x0A, 
   // chunk: 18
   // chunk name: ForestAllEmpty
  0x23, 0x24, 0x00, 0x03, 0x00, 0x00, 
  0x26, 0x25, 0x0C, 0x04, 0x01, 0x00, 
  0x03, 0x04, 0x03, 0x03, 0x03, 0x03, 
  0x01, 0x0C, 0x04, 0x03, 0x04, 0x00, 
  0x00, 0x23, 0x24, 0x03, 0x00, 0x0C, 
  0x00, 0x26, 0x25, 0x04, 0x00, 0x00, 
   // chunk: 19
   // chunk name: ESolidRight
  0x00, 0x00, 0x00, 0x03, 0x23, 0x24, 
  0x00, 0x01, 0x04, 0x23, 0x28, 0x25, 
  0x03, 0x03, 0x03, 0x26, 0x27, 0x24, 
  0x00, 0x00, 0x01, 0x03, 0x26, 0x25, 
  0x00, 0x0C, 0x00, 0x03, 0x23, 0x24, 
  0x00, 0x00, 0x00, 0x03, 0x26, 0x25, 
   // chunk: 20
   // chunk name: ESolidTop
  0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 
  0x26, 0x27, 0x28, 0x27, 0x28, 0x25, 
  0x04, 0x26, 0x25, 0x26, 0x25, 0x04, 
  0x01, 0x03, 0x04, 0x03, 0x04, 0x03, 
  0x00, 0x01, 0x00, 0x03, 0x23, 0x24, 
  0x0C, 0x00, 0x00, 0x03, 0x26, 0x25, 
   // chunk: 21
   // chunk name: ESolidTopRight
  0x00, 0x23, 0x24, 0x01, 0x23, 0x24, 
  0x0C, 0x26, 0x25, 0x23, 0x28, 0x25, 
  0x03, 0x03, 0x02, 0x26, 0x25, 0x01, 
  0x00, 0x04, 0x03, 0x02, 0x23, 0x24, 
  0x23, 0x24, 0x03, 0x04, 0x26, 0x25, 
  0x26, 0x25, 0x00, 0x03, 0x00, 0x00, 
   // chunk: 22
   // chunk name: ESolidLeft
  0x23, 0x24, 0x0C, 0x03, 0x00, 0x00, 
  0x26, 0x27, 0x24, 0x03, 0x04, 0x0C, 
  0x23, 0x28, 0x27, 0x24, 0x03, 0x03, 
  0x26, 0x27, 0x28, 0x25, 0x04, 0x00, 
  0x23, 0x28, 0x25, 0x03, 0x04, 0x00, 
  0x26, 0x25, 0x0C, 0x03, 0x00, 0x00, 
   // chunk: 23
   // chunk name: ESolidLeftRight
  0x23, 0x24, 0x0C, 0x03, 0x23, 0x24, 
  0x26, 0x27, 0x24, 0x03, 0x26, 0x25, 
  0x23, 0x28, 0x25, 0x04, 0x23, 0x24, 
  0x26, 0x25, 0x01, 0x03, 0x26, 0x25, 
  0x23, 0x24, 0x00, 0x04, 0x23, 0x24, 
  0x26, 0x25, 0x00, 0x03, 0x26, 0x25, 
   // chunk: 24
   // chunk name: ESolidLeftTop
  0x23, 0x24, 0x02, 0x23, 0x24, 0x00, 
  0x26, 0x27, 0x24, 0x26, 0x25, 0x01, 
  0x0C, 0x26, 0x25, 0x0C, 0x03, 0x03, 
  0x23, 0x24, 0x02, 0x03, 0x04, 0x00, 
  0x26, 0x27, 0x24, 0x03, 0x00, 0x0C, 
  0x0C, 0x26, 0x25, 0x03, 0x01, 0x00, 
   // chunk: 25
   // chunk name: SLTRight
  0x00, 0x23, 0x24, 0x23, 0x24, 0x0C, 
  0x23, 0x28, 0x25, 0x26, 0x27, 0x24, 
  0x26, 0x25, 0x04, 0x03, 0x26, 0x25, 
  0x01, 0x23, 0x24, 0x04, 0x23, 0x24, 
  0x23, 0x28, 0x25, 0x03, 0x26, 0x25, 
  0x26, 0x25, 0x0C, 0x03, 0x02, 0x00, 
   // chunk: 26
   // chunk name: ESolid
  0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 
  0x26, 0x27, 0x28, 0x27, 0x28, 0x25, 
  0x23, 0x28, 0x27, 0x28, 0x27, 0x24, 
  0x26, 0x27, 0x28, 0x27, 0x28, 0x25, 
  0x23, 0x28, 0x23, 0x24, 0x27, 0x24, 
  0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 
   // chunk: 27
   // chunk name: ESolidDown
  0x00, 0x0C, 0x00, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x03, 0x0C, 0x00, 
  0x03, 0x03, 0x04, 0x03, 0x04, 0x03, 
  0x00, 0x23, 0x24, 0x23, 0x24, 0x00, 
  0x23, 0x28, 0x27, 0x28, 0x27, 0x24, 
  0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 
   // chunk: 28
   // chunk name: ESolidRightDown
  0x0C, 0x00, 0x04, 0x03, 0x00, 0x0C, 
  0x00, 0x04, 0x03, 0x03, 0x23, 0x24, 
  0x03, 0x03, 0x04, 0x01, 0x26, 0x25, 
  0x23, 0x24, 0x0C, 0x23, 0x24, 0x0C, 
  0x26, 0x27, 0x24, 0x26, 0x27, 0x24, 
  0x00, 0x26, 0x25, 0x0C, 0x26, 0x25, 
   // chunk: 29
   // chunk name: ESolidUpRD
  0x00, 0x23, 0x24, 0x23, 0x24, 0x00, 
  0x0C, 0x26, 0x25, 0x26, 0x27, 0x24, 
  0x03, 0x03, 0x04, 0x03, 0x26, 0x25, 
  0x00, 0x00, 0x0C, 0x04, 0x23, 0x24, 
  0x01, 0x23, 0x24, 0x23, 0x28, 0x25, 
  0x00, 0x26, 0x25, 0x26, 0x25, 0x0C, 
   // chunk: 30
   // chunk name: ESolidLeftDown
  0x23, 0x24, 0x00, 0x03, 0x00, 0x0C, 
  0x26, 0x27, 0x24, 0x03, 0x04, 0x00, 
  0x23, 0x28, 0x27, 0x24, 0x03, 0x03, 
  0x26, 0x27, 0x28, 0x25, 0x00, 0x0C, 
  0x23, 0x28, 0x25, 0x23, 0x24, 0x01, 
  0x26, 0x25, 0x02, 0x26, 0x25, 0x00, 
   // chunk: 31
   // chunk name: ESolidLDRight
  0x00, 0x02, 0x00, 0x03, 0x0C, 0x00, 
  0x23, 0x24, 0x0C, 0x03, 0x23, 0x24, 
  0x26, 0x25, 0x01, 0x04, 0x26, 0x25, 
  0x0C, 0x23, 0x24, 0x04, 0x23, 0x24, 
  0x23, 0x28, 0x27, 0x24, 0x26, 0x25, 
  0x26, 0x25, 0x26, 0x25, 0x0C, 0x01, 
   // chunk: 32
   // chunk name: ESolidTLDown
  0x0C, 0x23, 0x24, 0x23, 0x24, 0x00, 
  0x01, 0x26, 0x27, 0x28, 0x25, 0x01, 
  0x23, 0x24, 0x26, 0x25, 0x03, 0x03, 
  0x26, 0x25, 0x03, 0x04, 0x03, 0x02, 
  0x02, 0x23, 0x24, 0x23, 0x24, 0x0C, 
  0x0C, 0x26, 0x25, 0x26, 0x25, 0x00, 
   // chunk: 33
   // chunk name: water bridge
  0x0C, 0x00, 0x00, 0x0C, 0x23, 0x24, 
  0x01, 0x00, 0x00, 0x00, 0x26, 0x25, 
  0x18, 0x18, 0x18, 0x07, 0x18, 0x18, 
  0x21, 0x21, 0x0A, 0x0B, 0x0A, 0x21, 
  0x21, 0x21, 0x0F, 0x0A, 0x0A, 0x21, 
  0x21, 0x21, 0x0E, 0x0A, 0x0E, 0x21, 
   // chunk: 34
   // chunk name: grass water
  0x23, 0x24, 0x00, 0x23, 0x24, 0x1B, 
  0x26, 0x25, 0x23, 0x28, 0x25, 0x1B, 
  0x00, 0x23, 0x28, 0x27, 0x24, 0x1B, 
  0x23, 0x28, 0x27, 0x28, 0x25, 0x1B, 
  0x26, 0x27, 0x28, 0x27, 0x24, 0x1B, 
  0x0C, 0x26, 0x25, 0x26, 0x25, 0x1B, 
   // chunk: 35
   // chunk name: Long Road
  0x00, 0x01, 0x01, 0x02, 0x14, 0x1B, 
  0x02, 0x01, 0x01, 0x01, 0x17, 0x16, 
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x01, 0x01, 0x23, 0x24, 0x14, 0x15, 
  0x01, 0x01, 0x26, 0x25, 0x17, 0x1B, 
  0x00, 0x01, 0x01, 0x01, 0x01, 0x1B, 
   // chunk: 36
   // chunk name: water trees
  0x01, 0x23, 0x24, 0x00, 0x00, 0x0C, 
  0x00, 0x26, 0x25, 0x00, 0x00, 0x00, 
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
  0x21, 0x21, 0x21, 0x21, 0x0D, 0x21, 
  0x21, 0x0D, 0x21, 0x21, 0x21, 0x21, 
  0x21, 0x21, 0x21, 0x0D, 0x0D, 0x21, 
   // chunk: 37
   // chunk name: empty float
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0A, 
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x0A, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
   // chunk: 38
   // chunk name: water Cave
  0x14, 0x1A, 0x1A, 0x1A, 0x1A, 0x15, 
  0x19, 0x0A, 0x0B, 0x0A, 0x0A, 0x1B, 
  0x19, 0x0A, 0x0A, 0x0A, 0x0B, 0x1B, 
  0x19, 0x10, 0x18, 0x20, 0x11, 0x1B, 
  0x17, 0x16, 0x1D, 0x31, 0x17, 0x16, 
  0x1C, 0x1E, 0x0B, 0x0A, 0x1C, 0x1E, 
   // chunk: 39
   // chunk name: CES0000
  0x18, 0x16, 0x0A, 0x00, 0x17, 0x18, 
  0x1D, 0x1E, 0x00, 0x0A, 0x1C, 0x1D, 
  0x0A, 0x0B, 0x0A, 0x0A, 0x0A, 0x00, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x0A, 
  0x15, 0x0A, 0x2F, 0x0A, 0x0B, 0x14, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 40
   // chunk name: CEmptyAll
  0x00, 0x0A, 0x0A, 0x00, 0x0B, 0x0A, 
  0x0A, 0x0B, 0x00, 0x0A, 0x0A, 0x00, 
  0x0A, 0x00, 0x0A, 0x0A, 0x0A, 0x00, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x0A, 
  0x00, 0x01, 0x0A, 0x0A, 0x0B, 0x0A, 
  0x0A, 0x0A, 0x00, 0x0A, 0x00, 0x0B, 
   // chunk: 41
   // chunk name: CES0001
  0x18, 0x16, 0x0A, 0x00, 0x17, 0x11, 
  0x1D, 0x1E, 0x00, 0x0A, 0x1C, 0x19, 
  0x0A, 0x0B, 0x0A, 0x00, 0x2F, 0x19, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x19, 
  0x15, 0x0A, 0x0A, 0x0A, 0x0B, 0x19, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 42
   // chunk name: CES0010
  0x18, 0x18, 0x11, 0x10, 0x18, 0x18, 
  0x1D, 0x1D, 0x17, 0x16, 0x1D, 0x1D, 
  0x0A, 0x0B, 0x1C, 0x1E, 0x0A, 0x00, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x0A, 
  0x15, 0x0A, 0x0A, 0x0A, 0x0B, 0x14, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 43
   // chunk name: CES0011
  0x18, 0x18, 0x18, 0x18, 0x11, 0x0B, 
  0x1D, 0x1D, 0x1D, 0x1D, 0x17, 0x11, 
  0x0A, 0x0B, 0x00, 0x0A, 0x1C, 0x19, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x19, 
  0x15, 0x0A, 0x0A, 0x0A, 0x0B, 0x19, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 44
   // chunk name: CES0100
  0x0A, 0x1B, 0x0A, 0x00, 0x17, 0x18, 
  0x10, 0x16, 0x00, 0x0A, 0x1C, 0x1D, 
  0x1B, 0x1E, 0x0A, 0x0A, 0x0A, 0x00, 
  0x1B, 0x2F, 0x00, 0x00, 0x0A, 0x0A, 
  0x1B, 0x0A, 0x0A, 0x0A, 0x0B, 0x14, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 45
   // chunk name: CES0101
  0x10, 0x16, 0x0A, 0x00, 0x17, 0x11, 
  0x1B, 0x1E, 0x00, 0x0A, 0x1C, 0x19, 
  0x1B, 0x0B, 0x0A, 0x0A, 0x00, 0x19, 
  0x1B, 0x0A, 0x0A, 0x00, 0x0A, 0x19, 
  0x1B, 0x01, 0x0A, 0x0A, 0x0B, 0x19, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 46
   // chunk name: CES0110
  0x0A, 0x00, 0x0A, 0x0B, 0x10, 0x18, 
  0x0A, 0x0B, 0x10, 0x18, 0x16, 0x1D, 
  0x10, 0x18, 0x16, 0x1D, 0x1E, 0x00, 
  0x1B, 0x1D, 0x1E, 0x00, 0x0A, 0x0A, 
  0x1B, 0x0A, 0x0A, 0x0A, 0x0B, 0x14, 
  0x13, 0x15, 0x0B, 0x0A, 0x14, 0x12, 
   // chunk: 47
   // chunk name: CES0111
  0x0A, 0x10, 0x18, 0x18, 0x18, 0x11, 
  0x10, 0x16, 0x2B, 0x31, 0x2B, 0x19, 
  0x1B, 0x1E, 0x0B, 0x0A, 0x2F, 0x19, 
  0x1B, 0x0A, 0x0A, 0x00, 0x0A, 0x19, 
  0x1B, 0x0A, 0x0A, 0x0A, 0x14, 0x12, 
  0x13, 0x15, 0x0B, 0x0A, 0x19, 0x0B, 
   // chunk: 48
   // chunk name: CE1000
  0x18, 0x16, 0x0A, 0x00, 0x17, 0x18, 
  0x1D, 0x1E, 0x00, 0x0A, 0x1C, 0x1D, 
  0x0A, 0x0B, 0x00, 0x0A, 0x0A, 0x00, 
  0x00, 0x0A, 0x0A, 0x00, 0x0A, 0x0A, 
  0x1A, 0x15, 0x00, 0x0A, 0x0B, 0x14, 
  0x0B, 0x13, 0x1A, 0x1A, 0x1A, 0x12, 
   // chunk: 49
   // chunk name: CES1001
  0x18, 0x16, 0x0A, 0x00, 0x17, 0x11, 
  0x1D, 0x1E, 0x00, 0x0A, 0x1C, 0x19, 
  0x0A, 0x0B, 0x0A, 0x0A, 0x2F, 0x19, 
  0x0A, 0x0A, 0x14, 0x1A, 0x15, 0x19, 
  0x1A, 0x1A, 0x12, 0x0A, 0x13, 0x12, 
  0x0A, 0x0B, 0x0A, 0x0B, 0x00, 0x0A, 
   // chunk: 50
   // chunk name: CES1010
  0x18, 0x11, 0x01, 0x00, 0x10, 0x18, 
  0x1D, 0x17, 0x18, 0x18, 0x16, 0x1D, 
  0x0A, 0x1C, 0x1D, 0x1D, 0x1E, 0x00, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x0A, 
  0x15, 0x00, 0x0A, 0x0A, 0x0B, 0x14, 
  0x13, 0x1A, 0x1A, 0x1A, 0x1A, 0x12, 
   // chunk: 51
   // chunk name: CES1011
  0x18, 0x18, 0x18, 0x07, 0x11, 0x0A, 
  0x1D, 0x1D, 0x1D, 0x07, 0x17, 0x11, 
  0x0A, 0x0B, 0x0A, 0x0A, 0x1C, 0x19, 
  0x0A, 0x0A, 0x0A, 0x00, 0x0A, 0x19, 
  0x15, 0x0A, 0x2F, 0x0A, 0x0B, 0x19, 
  0x13, 0x1A, 0x1A, 0x1A, 0x1A, 0x12, 
   // chunk: 52
   // chunk name: CES1100
  0x10, 0x16, 0x0A, 0x00, 0x17, 0x18, 
  0x1B, 0x1E, 0x00, 0x0A, 0x1C, 0x1D, 
  0x1B, 0x0B, 0x0A, 0x0A, 0x0A, 0x00, 
  0x13, 0x15, 0x0A, 0x00, 0x0A, 0x0A, 
  0x0A, 0x13, 0x15, 0x0A, 0x0B, 0x14, 
  0x0A, 0x0B, 0x13, 0x1A, 0x1A, 0x12, 
   // chunk: 53
   // chunk name: CES1101
  0x10, 0x16, 0x0A, 0x00, 0x17, 0x11, 
  0x1B, 0x1E, 0x00, 0x0A, 0x1C, 0x19, 
  0x1B, 0x0B, 0x0A, 0x0A, 0x0A, 0x19, 
  0x1B, 0x00, 0x0A, 0x00, 0x0A, 0x19, 
  0x1B, 0x0A, 0x0A, 0x0A, 0x14, 0x12, 
  0x13, 0x1A, 0x1A, 0x1A, 0x12, 0x0B, 
   // chunk: 54
   // chunk name: CES1110
  0x10, 0x18, 0x11, 0x10, 0x18, 0x18, 
  0x1B, 0x1D, 0x17, 0x16, 0x1D, 0x1D, 
  0x1B, 0x0B, 0x1C, 0x1E, 0x0A, 0x00, 
  0x1B, 0x0A, 0x0A, 0x00, 0x0A, 0x0A, 
  0x13, 0x15, 0x0A, 0x0A, 0x0B, 0x14, 
  0x0B, 0x13, 0x1A, 0x1A, 0x1A, 0x12, 
   // chunk: 55
   // chunk name: unnamed
  0x11, 0x14, 0x15, 0x0C, 0x23, 0x24, 
  0x17, 0x18, 0x16, 0x23, 0x28, 0x25, 
  0x1C, 0x1D, 0x1E, 0x26, 0x25, 0x03, 
  0x0B, 0x00, 0x0B, 0x0C, 0x03, 0x03, 
  0x1A, 0x15, 0x23, 0x24, 0x23, 0x24, 
  0x17, 0x16, 0x26, 0x25, 0x26, 0x25, 
   // chunk: 56
   // chunk name: All Black
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
   // chunk: 57
   // chunk name: house left
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x2E, 
  0x09, 0x34, 0x09, 0x34, 0x09, 0x09, 
  0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 
  0x09, 0x09, 0x35, 0x36, 0x09, 0x09, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
   // chunk: 58
   // chunk name: house right
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x33, 0x33, 0x2E, 0x2E, 0x2E, 0x2E, 
  0x34, 0x34, 0x33, 0x05, 0x05, 0x33, 
  0x09, 0x09, 0x09, 0x06, 0x06, 0x09, 
  0x09, 0x32, 0x09, 0x09, 0x09, 0x09, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
   // chunk: 59
   // chunk name: Inn Right
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x2E, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 
  0x09, 0x05, 0x34, 0x05, 0x34, 0x05, 
  0x09, 0x06, 0x09, 0x06, 0x09, 0x06, 
  0x09, 0x32, 0x09, 0x32, 0x09, 0x32, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
   // chunk: 60
   // chunk name: shop right
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
  0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
  0x33, 0x33, 0x33, 0x09, 0x33, 0x33, 
  0x34, 0x34, 0x34, 0x09, 0x34, 0x34, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
   // chunk: 61
   // chunk name: tree inside
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x0A, 0x0A, 0x0A, 0x0A, 0x08, 
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0C, 
  0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0A, 
  0x08, 0x0C, 0x0A, 0x0A, 0x0A, 0x08, 
  0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 
   // chunk: 62
   // chunk name: cave interior
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x10, 0x18, 0x18, 0x18, 0x18, 0x11, 
  0x1B, 0x09, 0x09, 0x09, 0x0B, 0x19, 
  0x1B, 0x09, 0x09, 0x09, 0x09, 0x19, 
  0x1B, 0x09, 0x09, 0x09, 0x09, 0x19, 
  0x13, 0x1A, 0x15, 0x00, 0x14, 0x12, 
   // chunk: 63
   // chunk name: Shop
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x29, 0x00, 0x00, 0x29, 0x00, 
  0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   // chunk: 64
   // chunk name: Inn
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x29, 0x00, 0x00, 0x29, 0x00, 
  0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

PROGMEM const unsigned char bm_tileset[] = {
   // Bitmap Image. No transparency
   // Width: 16 Height: 16
   16, 16, 
   // Frame 0
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 1
   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,
   // Frame 2
   0xFF,   0xFF,   0xE7,   0xE7,   0x99,   0x99,   0xE7,   0xE7,   0xFF,   0xFF,   0xF9,   0xF3,   0xFF,   0xE3,   0xF1,   0xFF,
   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,   0xF3,   0xF3,   0xCC,   0xCC,   0xF3,   0xF3,   0xFF,
   // Frame 3
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 4
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 5
   0x01,   0x1E,   0x9E,   0x81,   0x8D,   0xB5,   0xB5,   0xB5,   0xB5,   0xB5,   0xB5,   0x8D,   0x81,   0x9E,   0x1E,   0x01,
   0x00,   0x57,   0xAB,   0x53,   0xAB,   0x53,   0xAB,   0x53,   0xAB,   0x53,   0xAB,   0x53,   0xAB,   0x53,   0xA7,   0x00,
   // Frame 6
   0x80,   0x7E,   0x7E,   0x81,   0xBA,   0xB9,   0xBA,   0xB9,   0xBA,   0xB9,   0xBA,   0xB9,   0x80,   0x7E,   0x7E,   0x80,
   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,
   // Frame 7
   0x00,   0xFF,   0xAB,   0x00,   0x62,   0x26,   0x22,   0x66,   0x22,   0x26,   0x62,   0x26,   0x22,   0xFF,   0xAB,   0x00,
   0x00,   0xFF,   0xAB,   0x00,   0x62,   0x26,   0x22,   0x66,   0x22,   0x26,   0x62,   0x26,   0x22,   0xFF,   0xAB,   0x00,
   // Frame 8
   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
   // Frame 9
   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,
   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,
   // Frame 10
   0xFF,   0xFF,   0xFF,   0xFB,   0xFF,   0xFF,   0xBF,   0xFF,   0xFF,   0xFF,   0xFE,   0xFF,   0xFF,   0xFF,   0xF7,   0xFF,
   0xFF,   0xFB,   0xFF,   0xFF,   0xFF,   0xDF,   0xFF,   0x7F,   0xFF,   0xFF,   0xFF,   0xFD,   0xFF,   0xFF,   0xFF,   0xBF,
   // Frame 11
   0xFF,   0xFF,   0xFF,   0xFB,   0xFF,   0xFF,   0xBF,   0xC7,   0xDB,   0xDB,   0xDA,   0xD7,   0xC7,   0xFF,   0xF7,   0xFF,
   0xFF,   0xF9,   0xFA,   0xFA,   0xF9,   0xDF,   0xFF,   0x7F,   0xE3,   0xED,   0xED,   0xED,   0xF3,   0xFF,   0xFF,   0xBF,
   // Frame 12
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFD,   0xF1,   0xE9,   0xD5,   0xDB,   0xD7,   0xCF,   0xFF,   0xFF,   0xFF,
   0xFF,   0xE7,   0xEB,   0xED,   0xEA,   0xF4,   0xF8,   0xFE,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 13
   0xFE,   0x9B,   0x19,   0x11,   0x10,   0x00,   0x00,   0x00,   0x00,   0x01,   0x01,   0x83,   0xC6,   0x7D,   0xAA,   0x55,
   0xAA,   0x55,   0xAB,   0x57,   0xAA,   0x56,   0xAA,   0x7E,   0xC6,   0x83,   0x83,   0x83,   0x92,   0xD7,   0xFE,   0x55,
   // Frame 14
   0xAA,   0x55,   0xAA,   0x55,   0xAE,   0x55,   0xAA,   0xD5,   0xAA,   0x55,   0xAA,   0x55,   0xBA,   0x55,   0xAA,   0x55,
   0xAA,   0x55,   0xAA,   0x55,   0xAE,   0x55,   0xEA,   0x55,   0xAA,   0x55,   0xAA,   0x55,   0xBA,   0x55,   0xAA,   0x55,
   // Frame 15
   0xAA,   0x55,   0xAE,   0x55,   0xAA,   0x55,   0xAA,   0x55,   0xAA,   0xD5,   0xBA,   0x55,   0xAA,   0x55,   0xAA,   0x55,
   0xAA,   0x55,   0xAE,   0x55,   0xAA,   0x55,   0xAA,   0x55,   0xEA,   0x55,   0xBA,   0x55,   0xAA,   0x55,   0xAA,   0x55,
   // Frame 16
   0x3F,   0xCF,   0xF7,   0xFB,   0xFD,   0xFD,   0xFE,   0xFE,   0xFE,   0xFE,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x07,   0x01,   0xC0,   0xB0,   0x78,   0x78,   0x74,   0x76,   0x86,
   // Frame 17
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFD,   0xFD,   0xFB,   0xF7,   0xCF,   0x3F,
   0x86,   0x7A,   0xFC,   0xFC,   0x18,   0xE0,   0xC0,   0x01,   0x03,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 18
   0x61,   0x6E,   0x2E,   0x1E,   0x1E,   0x0D,   0x03,   0x80,   0xE0,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7F,   0x7F,   0x7F,   0x7F,   0xBF,   0xBF,   0xDF,   0xEF,   0xF3,   0xFC,
   // Frame 19
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xC0,   0x80,   0x03,   0x07,   0x18,   0x3F,   0x3F,   0x5E,   0x61,
   0xFC,   0xF3,   0xEF,   0xDF,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x7F,   0x7F,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 20
   0x1F,   0xEF,   0xF7,   0xF7,   0xEF,   0xC7,   0x3B,   0xBD,   0xDD,   0xDE,   0xDE,   0x1E,   0x6D,   0x73,   0x77,   0x77,
   0x8E,   0x71,   0xFB,   0xFB,   0x1B,   0xE0,   0xEF,   0x0F,   0x03,   0xC1,   0xF0,   0xF8,   0xFC,   0xFC,   0xFE,   0xFE,
   // Frame 21
   0x6D,   0x6E,   0x6E,   0x1E,   0xDD,   0xC1,   0xDD,   0xDE,   0xBE,   0x3E,   0xDE,   0xCD,   0xD3,   0xBF,   0x7F,   0xFF,
   0xFE,   0xFE,   0xFC,   0xFC,   0xF8,   0xF0,   0xC1,   0x03,   0x07,   0xF7,   0xF0,   0xEF,   0x1F,   0xDF,   0xEE,   0xF1,
   // Frame 22
   0x7F,   0x7F,   0x3F,   0x3F,   0x1F,   0x0F,   0x83,   0xC0,   0xF0,   0xF7,   0x07,   0xD8,   0xDF,   0xDF,   0x8E,   0x71,
   0xEE,   0xEE,   0xCE,   0xB6,   0x78,   0x7B,   0x7B,   0xBB,   0xBD,   0x1C,   0xE3,   0xF7,   0xEF,   0xEF,   0xC7,   0x38,
   // Frame 23
   0x71,   0x8E,   0xDF,   0xDF,   0xD8,   0x07,   0xF7,   0xF0,   0xC0,   0x83,   0x0F,   0x1F,   0x3F,   0x3F,   0x7F,   0x7F,
   0x38,   0xC7,   0xEF,   0xEF,   0xF7,   0xE3,   0x1C,   0xBD,   0xBB,   0x7B,   0x7B,   0x78,   0xB6,   0xCE,   0xDE,   0xDE,
   // Frame 24
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   0xEE,   0xEE,   0xEE,   0xC4,   0x38,   0xBC,   0xBE,   0x7E,   0x7E,   0x7E,   0x7E,   0x3C,   0xC0,   0xDC,   0xDE,   0xDE,
   // Frame 25
   0x38,   0xC7,   0xEF,   0xEF,   0x0E,   0xF5,   0xF3,   0x00,   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   0x86,   0x79,   0x7B,   0x7B,   0x30,   0xCF,   0xEF,   0x00,   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 26
   0x7B,   0x7B,   0x3B,   0x03,   0x3C,   0x7E,   0x7E,   0x7E,   0x7E,   0x7D,   0x3D,   0x1C,   0x23,   0x77,   0x77,   0x77,
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 27
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,   0x00,   0xF3,   0xF5,   0x0E,   0xEF,   0xEF,   0xC7,   0x38,
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,   0x00,   0xEF,   0xCF,   0x30,   0x7B,   0x7B,   0x79,   0x86,
   // Frame 28
   0x0C,   0xF3,   0xF7,   0xF7,   0xE3,   0xDC,   0x3F,   0xBF,   0xBF,   0xBF,   0xBF,   0x0E,   0xF1,   0xFB,   0xFB,   0xFB,
   0xFF,   0xFE,   0xFD,   0xFD,   0xFD,   0xF0,   0xEF,   0xDF,   0xDF,   0xDF,   0xDF,   0xC3,   0xBC,   0x7E,   0x7D,   0x7D,
   // Frame 29
   0xF7,   0xF7,   0xF7,   0xE3,   0x1C,   0xBF,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x3E,   0xCD,   0xF3,   0xFB,   0xFB,
   0x7D,   0x7D,   0xB1,   0x8E,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x7F,   0xBF,   0x8E,   0xB1,   0x7B,   0x7B,   0x7B,
   // Frame 30
   0xFB,   0xF7,   0xF7,   0xF3,   0x0C,   0xBF,   0xBF,   0xBF,   0xBF,   0x3F,   0xDE,   0xE1,   0xF7,   0xF7,   0xF3,   0x00,
   0x7B,   0x7D,   0x7D,   0xB8,   0xC7,   0xDF,   0xDF,   0xDF,   0xDF,   0xEF,   0xF0,   0xFD,   0xFD,   0xFD,   0xFE,   0xFF,
   // Frame 31
   0x7A,   0x7A,   0x6A,   0x5A,   0x6A,   0x5A,   0x7A,   0x4A,   0x4A,   0x7A,   0x5A,   0x6A,   0x5A,   0x6A,   0x7A,   0x7A,
   0x7F,   0x41,   0x7F,   0x41,   0x7B,   0x77,   0x6F,   0x41,   0x7F,   0x41,   0x7B,   0x77,   0x6F,   0x41,   0x7F,   0x7F,
   // Frame 32
   0x00,   0x7E,   0x3C,   0x3C,   0x5A,   0x5A,   0x66,   0x66,   0x66,   0x66,   0x5A,   0x5A,   0x3C,   0x3C,   0x7E,   0x00,
   0x00,   0x7F,   0x41,   0x55,   0x55,   0x6B,   0x7F,   0x41,   0x5D,   0x41,   0x7F,   0x51,   0x55,   0x45,   0x7F,   0x00,
   // Frame 33
   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,
   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,
   // Frame 34
   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,
   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,
   // Frame 35
   0xFF,   0xFF,   0x3F,   0xDF,   0xEF,   0xF7,   0xBB,   0x5B,   0xAD,   0x55,   0xFD,   0xFE,   0xEE,   0xD6,   0xEA,   0xD6,
   0x07,   0x50,   0xAA,   0x5F,   0xBF,   0x7F,   0xFE,   0x7D,   0xFA,   0xFD,   0xFA,   0xF5,   0xEA,   0xD5,   0xEB,   0xD5,
   // Frame 36
   0xEE,   0xFE,   0xFE,   0xFC,   0xFA,   0x55,   0xAD,   0x5D,   0xBB,   0xFB,   0xF7,   0xCF,   0x9F,   0x3F,   0xFF,   0xFF,
   0xEB,   0xD5,   0xEB,   0xF5,   0xFA,   0xFD,   0xFA,   0xFD,   0xFE,   0x7F,   0xBF,   0x5F,   0xAA,   0x55,   0xA8,   0x07,
   // Frame 37
   0xAF,   0x57,   0xAF,   0x57,   0xAB,   0x55,   0xAA,   0x95,   0xAA,   0x55,   0xAA,   0x95,   0xCA,   0xE5,   0xF2,   0xFC,
   0x5C,   0x6D,   0xBC,   0xC5,   0xF6,   0xEB,   0xD7,   0xD7,   0xDF,   0xDE,   0xED,   0xF3,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 38
   0xFC,   0xF1,   0xEA,   0xD5,   0xAA,   0x95,   0x2A,   0x95,   0xAA,   0x95,   0xAB,   0x57,   0xAB,   0x57,   0xAF,   0x57,
   0xFF,   0xFF,   0xFF,   0xFF,   0xF3,   0xED,   0xDE,   0xDF,   0xD7,   0xD7,   0xEB,   0xF7,   0xC6,   0xBD,   0x6C,   0x5D,
   // Frame 39
   0xAF,   0x57,   0x2F,   0xD7,   0xEB,   0xF5,   0xBA,   0x59,   0xAC,   0x55,   0xFC,   0xFE,   0xEE,   0xD6,   0xEA,   0xD6,
   0x04,   0x50,   0xAA,   0x5F,   0xBF,   0x7F,   0xFE,   0x7D,   0xFA,   0xFD,   0xFA,   0xF5,   0xEA,   0xD5,   0xEB,   0xD5,
   // Frame 40
   0xEE,   0xFE,   0xFE,   0xFC,   0xFA,   0x55,   0xAC,   0x5D,   0xBA,   0xF9,   0xF3,   0xC7,   0x8B,   0x17,   0xAF,   0x57,
   0xEB,   0xD5,   0xEB,   0xF5,   0xFA,   0xFD,   0xFA,   0xFD,   0xFE,   0x7F,   0xBF,   0x5F,   0xAA,   0x55,   0xA8,   0x05,
   // Frame 41
   0x02,   0xF2,   0xA2,   0x52,   0xA2,   0x52,   0xF2,   0x02,   0x02,   0xF2,   0xA2,   0x52,   0xA2,   0x52,   0xF2,   0x02,
   0x00,   0x3F,   0x6A,   0x55,   0x6A,   0x55,   0x3F,   0x00,   0x00,   0x3F,   0x6A,   0x55,   0x6A,   0x55,   0x3F,   0x00,
   // Frame 42
   0x7A,   0x7A,   0x6A,   0x5A,   0x6A,   0x5A,   0x7A,   0x4A,   0x4A,   0x7A,   0x5A,   0x6A,   0x5A,   0x6A,   0x7A,   0x7A,
   0x7F,   0x53,   0x55,   0x65,   0x7F,   0x41,   0x77,   0x41,   0x7F,   0x63,   0x5D,   0x63,   0x7F,   0x41,   0x75,   0x7B,
   // Frame 43
   0x00,   0xFD,   0xFD,   0xFD,   0xFD,   0x05,   0x15,   0x15,   0x15,   0x15,   0x05,   0xFD,   0xFD,   0xFD,   0xFD,   0x00,
   0x00,   0x6F,   0x6F,   0x6F,   0x6C,   0x1A,   0x6A,   0x6A,   0x6A,   0x6A,   0x1A,   0x6C,   0x6F,   0x6F,   0x6F,   0x00,
   // Frame 44
   0xFD,   0xFD,   0x01,   0xF9,   0x79,   0x01,   0xF9,   0xF9,   0xF9,   0xF9,   0x01,   0xF9,   0xF9,   0x01,   0xFD,   0xFD,
   0x7F,   0x7F,   0x80,   0xBC,   0xB9,   0x81,   0xB8,   0xBF,   0xBF,   0xBF,   0x80,   0xBF,   0xBF,   0x80,   0x7F,   0x7F,
   // Frame 45
   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,
   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,
   // Frame 46
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,
   // Frame 47
   0x3F,   0xDF,   0xEF,   0xF7,   0xFB,   0xFD,   0xFD,   0xFD,   0xFD,   0xA9,   0x55,   0xAB,   0x57,   0xAF,   0x5F,   0x3F,
   0xE0,   0x8A,   0x55,   0x2B,   0x7F,   0x2B,   0x55,   0x2A,   0x55,   0x2B,   0x57,   0x2A,   0x81,   0x80,   0xC0,   0xE0,
   // Frame 48
   0xEE,   0xD6,   0xEE,   0xD6,   0xAE,   0xDE,   0xAE,   0xDE,   0xAE,   0xDE,   0xAE,   0xDE,   0xAE,   0xD6,   0xEE,   0xD6,
   0xEB,   0xD5,   0xEB,   0xD5,   0xAB,   0xD7,   0xAB,   0xD7,   0xAB,   0xD7,   0xAB,   0xD7,   0xAB,   0xD5,   0xEB,   0xD5,
   // Frame 49
   0x0F,   0xF3,   0x0B,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x0B,   0xF3,   0x0F,
   0x00,   0x7F,   0x80,   0x80,   0xC0,   0xC0,   0xC0,   0xC0,   0xE0,   0xE0,   0xE0,   0xF0,   0xF0,   0x80,   0x7F,   0x00,
   // Frame 50
   0x01,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0x01,
   0xF0,   0x8B,   0x6B,   0x6B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x0B,   0x6B,   0x6B,   0x8B,   0x70,
   // Frame 51
   0x01,   0xDD,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0x5D,   0xDD,   0x01,
   0x00,   0xFF,   0x40,   0x56,   0x50,   0x56,   0x50,   0x56,   0x56,   0x50,   0x56,   0x50,   0x56,   0x40,   0xFF,   0x00,
   // Frame 52
   0x00,   0xFF,   0x40,   0x56,   0x50,   0x56,   0x50,   0x56,   0x56,   0x50,   0x56,   0x50,   0x56,   0x40,   0xFF,   0x00,
   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,
   // Frame 53
   0x01,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,
   0xF0,   0x8B,   0x6B,   0x6B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,
   // Frame 54
   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0x01,
   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x4B,   0x8B,   0x0B,   0x6B,   0x6B,   0x8B,   0x70,
};


#define TOTAL_REGIONS     18
#define LEVEL_CHUNK_W    32
#define LEVEL_CHUNK_H    32


const unsigned char PROGMEM regions[] = 
{
  // region: 0
  // region name: Canyons
  0x00, 0x00, 0x0E, 0x0E, 
  // region: 1
  // region name: Forest
  0x0F, 0x00, 0x11, 0x0F, 
  // region: 2
  // region name: apple grow
  0x0C, 0x10, 0x03, 0x04, 
  // region: 3
  // region name: Long Road
  0x01, 0x14, 0x0E, 0x01, 
  // region: 4
  // region name: Island
  0x12, 0x16, 0x04, 0x03, 
  // region: 5
  // region name: Fields Swamp
  0x0F, 0x0F, 0x01, 0x0F, 
  // region: 6
  // region name: Swamp Forest
  0x10, 0x0F, 0x10, 0x01, 
  // region: 7
  // region name: island2
  0x18, 0x19, 0x05, 0x03, 
  // region: 8
  // region name: Canyon Fields
  0x00, 0x0E, 0x0F, 0x01, 
  // region: 9
  // region name: Canyon Forest
  0x0E, 0x00, 0x01, 0x0E, 
  // region: 10
  // region name: House Interior
  0x01, 0x1E, 0x02, 0x01, 
  // region: 11
  // region name: Inn Interior
  0x04, 0x1E, 0x02, 0x01, 
  // region: 12
  // region name: shop Interrior
  0x07, 0x1E, 0x02, 0x01, 
  // region: 13
  // region name: Tree Interior
  0x0A, 0x1E, 0x01, 0x01, 
  // region: 14
  // region name: battle Cave
  0x0C, 0x1E, 0x02, 0x01, 
  // region: 15
  // region name: Grasslands
  0x00, 0x0F, 0x0F, 0x0F, 
  // region: 16
  // region name: Interior BLACK
  0x00, 0x1E, 0x20, 0x02, 
  // region: 17
  // region name: Swamp
  0x10, 0x0F, 0x10, 0x0F, 
};


const unsigned char PROGMEM solid_map[] = 
{
  0x16, 0xC4, 0xAB, 0xBD, 
  0x42, 0x11, 0x0B, 0x96, 
  0x94, 0x76, 0xE9, 0xD0, 
  0xCD, 0x40, 0x24, 0x03, 
  0x21, 0x5A, 0xB1, 0x94, 
  0x88, 0x59, 0xAB, 0xA6, 
  0x4E, 0xC5, 0x02, 0xA0, 
  0x24, 0x49, 0x68, 0x15, 
  0x53, 0xC4, 0x47, 0x83, 
  0x46, 0x50, 0x10, 0xA8, 
  0x10, 0x59, 0x9B, 0xAD, 
  0x66, 0x55, 0x42, 0xA4, 
  0x08, 0x44, 0x5F, 0x85, 
  0xBD, 0x68, 0x80, 0x30, 
  0xFF, 0xFF, 0x37, 0x9E, 
  0xD3, 0xD0, 0x00, 0x40, 
  0x49, 0x8A, 0x29, 0xA2, 
  0x11, 0x8A, 0x82, 0x8B, 
  0x77, 0x89, 0x38, 0x98, 
  0x55, 0xAB, 0xA5, 0xCA, 
  0x01, 0x00, 0x30, 0x92, 
  0x77, 0xF7, 0xAB, 0xA9, 
  0x51, 0x88, 0x41, 0xA1, 
  0x05, 0x8B, 0x5A, 0x8C, 
  0x6F, 0xA2, 0x92, 0xBB, 
  0x39, 0xEF, 0xAC, 0x83, 
  0x41, 0x92, 0x29, 0xB0, 
  0x09, 0x85, 0x80, 0xAC, 
  0x49, 0x90, 0x4D, 0x8C, 
  0xFF, 0xFF, 0xFF, 0xFF, 
  0x24, 0x21, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
};



byte getChunk(const Point &chunk_pos);
bool getChunkBit(const byte &chunk_x, const byte &chunk_y);
byte getTileInChunk(const byte &chunk, const Point &tile_pos);
Point world_to_chunk(const Point &world_pos);
bool getSolid(const Point &world_pos);
byte getTileID(const Point &world_pos);
byte getRegion(const Point &chunk_pos);



byte getRegion(const Point &chunk_pos)
{
  for (byte i = 0; i < TOTAL_REGIONS; i++)
  {
      Rect reg = {.x = pgm_read_byte(regions + i * 4), .y = pgm_read_byte(regions + 1 + i * 4),
                .width = pgm_read_byte(regions + 2 + i * 4), .height = pgm_read_byte(regions + 3 + i * 4) };
      if (arduboy.collide(chunk_pos, reg)) return i;
  }
  return 255;     // error
}



byte getTileID(const Point &world_pos)
{
    switch ((world_pos.x >> 4) + (world_pos.y >> 4) * 192)
    {
   }
    
    Point chunk_pos = { .x = world_pos.x / 96, .y = world_pos.y / 96 };
    byte chunk = getChunk(chunk_pos);
    byte tile = getTileInChunk(chunk, world_to_chunk(world_pos));
    
    switch(tile)
    {
      case 14: tile += waterframe; break;
      case 15: tile -= waterframe; break;
      case 33: tile += waterframe; break;
      case 34: tile -= waterframe; break;
    }
    
    return tile;
}



bool getChunkBit(const byte &chunk_x, const byte &chunk_y)
{
  if (chunk_x < 0 || chunk_x >= LEVEL_CHUNK_W
  || chunk_y < 0 || chunk_y >= LEVEL_CHUNK_H)
    return 1;
    
  byte x = chunk_x / 8;           // 8 is number of chunks per byte
  byte y = chunk_y * 4;           // 4 is number of bytes per row
  byte i = chunk_x % 8;

  byte b = (pgm_read_byte(solid_map + x + y) & _BV(i));
  return (b > 0);
}



byte getTileInChunk(const byte &chunk, const Point &tile_pos)
{
  return pgm_read_byte(chunks + ((chunk & 0x7F) * 36) + tile_pos.x + tile_pos.y * 6);
}



bool getSolid(const Point &world_pos)
{
  return (getTileID(world_pos) >= 16);
}



bool getSolid(const int &world_x, const int &world_y)
{
  Point world_pos = {.x = world_x, .y = world_y };
  return (getTileID(world_pos) >= 16);
}



Point world_to_chunk(const Point &world_pos)
{
    Point out = {.x = (world_pos.x % 96) >> 4, .y = (world_pos.y % 96) >> 4 };
    return out;
}



// getChunk
// Returns a value greater than 127 if the chunk was specifically placed.
// If the chunk is part of a region the returned value will be
// less than 128.
// To get the actual chunk value of a specific chunk, AND (&) the returned
// chunk with 0x7F (B01111111)
byte getChunk(const Point &chunk_pos)
{
    // specific chunks
    switch (chunk_pos.x + chunk_pos.y * 32)
    {
        case 802: return 145; break; // swamp house chunk_x: 2 chunk_y: 25
        case 868: return 145; break; // swamp house chunk_x: 4 chunk_y: 27
        case 865: return 145; break; // swamp house chunk_x: 1 chunk_y: 27
        case 627: return 192; break; // Inn chunk_x: 19 chunk_y: 19
        case 513: return 145; break; // swamp house chunk_x: 1 chunk_y: 16
        case 636: return 145; break; // swamp house chunk_x: 28 chunk_y: 19
        case 600: return 145; break; // swamp house chunk_x: 24 chunk_y: 18
        case 570: return 166; break; // water Cave chunk_x: 26 chunk_y: 17
        case 520: return 145; break; // swamp house chunk_x: 8 chunk_y: 16
        case 845: return 145; break; // swamp house chunk_x: 13 chunk_y: 26
        case 716: return 166; break; // water Cave chunk_x: 12 chunk_y: 22
        case 84: return 145; break; // swamp house chunk_x: 20 chunk_y: 2
        case 113: return 145; break; // swamp house chunk_x: 17 chunk_y: 3
        case 208: return 145; break; // swamp house chunk_x: 16 chunk_y: 6
        case 180: return 132; break; // square chunk_x: 20 chunk_y: 5
        case 30: return 166; break; // water Cave chunk_x: 30 chunk_y: 0
        case 379: return 145; break; // swamp house chunk_x: 27 chunk_y: 11
        case 253: return 145; break; // swamp house chunk_x: 29 chunk_y: 7
        case 91: return 145; break; // swamp house chunk_x: 27 chunk_y: 2
        case 313: return 132; break; // square chunk_x: 25 chunk_y: 9
        case 432: return 132; break; // square chunk_x: 16 chunk_y: 13
        case 725: return 136; break; // RS0011 chunk_x: 21 chunk_y: 22
        case 828: return 136; break; // RS0011 chunk_x: 28 chunk_y: 25
        case 786: return 143; break; // RS1100 chunk_x: 18 chunk_y: 24
        case 888: return 143; break; // RS1100 chunk_x: 24 chunk_y: 27
        case 300: return 145; break; // swamp house chunk_x: 12 chunk_y: 9
        case 194: return 166; break; // water Cave chunk_x: 2 chunk_y: 6
        case 493: return 132; break; // square chunk_x: 13 chunk_y: 15
        case 485: return 132; break; // square chunk_x: 5 chunk_y: 15
        case 483: return 132; break; // square chunk_x: 3 chunk_y: 15
        case 737: return 132; break; // square chunk_x: 1 chunk_y: 23
        case 873: return 132; break; // square chunk_x: 9 chunk_y: 27
        case 776: return 132; break; // square chunk_x: 8 chunk_y: 24
        case 846: return 132; break; // square chunk_x: 14 chunk_y: 26
        case 718: return 132; break; // square chunk_x: 14 chunk_y: 22
        case 353: return 132; break; // square chunk_x: 1 chunk_y: 11
        case 427: return 132; break; // square chunk_x: 11 chunk_y: 13
        case 172: return 132; break; // square chunk_x: 12 chunk_y: 5
        case 103: return 132; break; // square chunk_x: 7 chunk_y: 3
        case 756: return 191; break; // Shop chunk_x: 20 chunk_y: 23
    }


    // regions
    switch (getRegion(chunk_pos))
    {
        case 0:  // Canyons
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 40;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 39; break;
                    case 1: return 41; break;
                    case 2: return 42; break;
                    case 3: return 43; break;
                    case 4: return 44; break;
                    case 5: return 45; break;
                    case 6: return 46; break;
                    case 7: return 47; break;
                    case 8: return 48; break;
                    case 9: return 49; break;
                    case 10: return 50; break;
                    case 11: return 51; break;
                    case 12: return 52; break;
                    case 13: return 53; break;
                    case 14: return 54; break;
                }
            }
        } break;
        case 1:  // Forest
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 26;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 18; break;
                    case 1: return 19; break;
                    case 2: return 20; break;
                    case 3: return 21; break;
                    case 4: return 22; break;
                    case 5: return 23; break;
                    case 6: return 24; break;
                    case 7: return 25; break;
                    case 8: return 27; break;
                    case 9: return 28; break;
                    case 10: return 3; break;
                    case 11: return 29; break;
                    case 12: return 30; break;
                    case 13: return 31; break;
                    case 14: return 32; break;
                    case 15: return 26; break;
                }
            }
        } break;
        case 2:  // apple grow
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 2;
            }

            else
            {
                return 17;
            }
        } break;
        case 3:  // Long Road
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 3;
            }

            else
            {
                return 4;
            }
        } break;
        case 4:  // Island
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 37;
            }

            else
            {
                return 17;
            }
        } break;
        case 5:  // Fields Swamp
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 35;
            }

            else
            {
                return 34;
            }
        } break;
        case 6:  // Swamp Forest
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 36;
            }

            else
            {
                return 33;
            }
        } break;
        case 7:  // island2
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 37;
            }

            else
            {
                return 17;
            }
        } break;
        case 8:  // Canyon Fields
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 2;
            }

            else
            {
                return 0;
            }
        } break;
        case 9:  // Canyon Forest
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 55;
            }

            else
            {
                return 26;
            }
        } break;
        case 10:  // House Interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 57;
            }

            else
            {
                return 58;
            }
        } break;
        case 11:  // Inn Interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 57;
            }

            else
            {
                return 59;
            }
        } break;
        case 12:  // shop Interrior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 57;
            }

            else
            {
                return 60;
            }
        } break;
        case 13:  // Tree Interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 61;
            }

            else
            {
                return 56;
            }
        } break;
        case 14:  // battle Cave
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 62;
            }

            else
            {
                return 56;
            }
        } break;
        case 15:  // Grasslands
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 1;
            }

            else
            {
                return 0;
            }
        } break;
        case 16:  // Interior BLACK
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 56;
            }

            else
            {
                return 57;
            }
        } break;
        case 17:  // Swamp
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 16;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 5; break;
                    case 1: return 6; break;
                    case 2: return 7; break;
                    case 3: return 8; break;
                    case 4: return 9; break;
                    case 5: return 10; break;
                    case 6: return 11; break;
                    case 7: return 10; break;
                    case 8: return 12; break;
                    case 9: return 13; break;
                    case 10: return 14; break;
                    case 11: return 14; break;
                    case 12: return 15; break;
                    case 13: return 10; break;
                    case 14: return 14; break;
                    case 15: return 16; break;
                }
            }
        } break;

    }
    return 0; // default chunk
}



        
void drawTiles()
{
  int cx = (cam.x >> 4) << 4;
  int cy = (cam.y >> 4) << 4;
  for (int x = 0; x <= 128; x += 16)
  {
     for (int y = 0; y <= 64; y += 16)
     {
        int ccx = cx + x;
        int ccy = cy + y;
        Point pos = {.x = cam.x + x, .y = cam.y + y };
        byte tile = getTileID(pos);
        sprites.drawOverwrite(ccx - cam.x, ccy - cam.y, bm_tileset, tile);
     }
  }
}


uint16_t last_door_x = 0;
uint16_t last_door_y = 0;
byte last_door = 255;

#define TOTAL_DOORS   54

const unsigned char PROGMEM doors[] = 
{
   0x03, 0x01, // unnamed
   0x15, 0x01, // unnamed
   0x33, 0x0D, // unnamed
   0x0F, 0x28, // unnamed
   0x03, 0x37, // unnamed
   0x21, 0x31, // unnamed
   0x2D, 0x25, // unnamed
   0x4B, 0x21, // unnamed
   0x4B, 0x39, // unnamed
   0x45, 0x43, // unnamed
   0x45, 0x51, // unnamed
   0x09, 0x45, // unnamed
   0x15, 0x5D, // unnamed
   0x09, 0x63, // unnamed
   0x21, 0x5D, // unnamed
   0x33, 0x63, // unnamed
   0x51, 0x5D, // unnamed
   0x51, 0x75, // unnamed
   0x4B, 0x88, // unnamed
   0x57, 0x87, // unnamed
   0x09, 0x8D, // unnamed
   0x0F, 0x99, // unnamed
   0x09, 0xA5, // unnamed
   0x1B, 0xA5, // unnamed
   0x0B, 0xB9, // unnamed
   0x1D, 0xB9, // unnamed
   0x2F, 0xB9, // unnamed
   0x39, 0xA5, // unnamed
   0x3E, 0xB9, // unnamed
   0x51, 0x9F, // unnamed
   0x57, 0x9F, // unnamed
   0x4B, 0xB9, // unnamed
   0x33, 0x93, // unnamed
   0x75, 0x8D, // unnamed
   0x7B, 0x8D, // unnamed
   0x7B, 0x93, // unnamed
   0x75, 0x75, // unnamed
   0x93, 0x6F, // unnamed
   0x9F, 0x6A, // unnamed
   0xAB, 0x75, // unnamed
   0xAB, 0x9F, // unnamed
   0xA5, 0xA5, // unnamed
   0x9F, 0xA5, // unnamed
   0x99, 0x99, // unnamed
   0x93, 0x99, // unnamed
   0xA5, 0x45, // unnamed
   0x99, 0x39, // unnamed
   0x63, 0x51, // unnamed
   0x63, 0x27, // unnamed
   0x69, 0x15, // unnamed
   0x7B, 0x21, // unnamed
   0x7B, 0x0F, // unnamed
   0xA5, 0x0F, // unnamed
   0xB7, 0x04, // unnamed
};


void checkDoors()
{
    Point p;
    p.x = player.x;
    p.y = player.y;
    for (byte i = 0; i < TOTAL_DOORS * 2; i++)
    {
        Rect door = {.x = pgm_read_byte(doors + i * 2) * 16 - 3, .y = pgm_read_byte(doors + 1 + i * 2) * 16,
                    .width = 10, .height = 10 };

        if (arduboy.collide(p, door))
        {
            if (player.y > 2880)
            {
              player.x = last_door_x + 3;
              player.y = last_door_y + 12;
              last_door_x = 0;
              last_door_y = 0;
              last_door = 255;
              player.walking = false;
              return;
            }
            else
            {
              Point cpos = {.x = player.x / 96, .y = player.y / 96 };
              switch (getChunk(cpos) & 0x7F)
              {
                case 4: // tree house
                  player.x = 176;
                  player.y = 1948;
                  break;
                case 47: // canyon house
                case 17: // swamp house
                  player.x = 176;
                  player.y = 2948;
                  break;
                case 38: // water cave
                  player.x = 1200;
                  player.y = 2948;
                  break;
                case 63: // shop
                  player.x = 752;
                  player.y = 2948;
                  break;
                case 64: // inn
                  player.x = 464;
                  player.y = 2948;
                  break;
              }
              last_door = i;
              last_door_x = door.x;
              last_door_y = door.y;
              player.walking = false;
              return;
            }
        }
    }
}
#endif

