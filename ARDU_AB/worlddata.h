
#ifndef WORLDDATA_H
#define WORLDDATA_H
/// The below code was generated by
/// the Arduventure World Editor
/// created by Gavin Atkin 2016-2017



#define PLAYER_START_X   144
#define PLAYER_START_Y   1600

const unsigned char PROGMEM chunks[] = 
{
   // number of chunks: 7
   // number of tiles in chunks: 36
   // space used by chunks: 252 bytes
   // chunk: 0
   // chunk name: Grassland Borde
  0x00, 0x00, 0x2B, 0x2B, 0x21, 0x22, 
  0x01, 0x00, 0x2B, 0x00, 0x24, 0x23, 
  0x00, 0x21, 0x22, 0x01, 0x01, 0x2B, 
  0x2B, 0x24, 0x25, 0x22, 0x2B, 0x2B, 
  0x00, 0x00, 0x24, 0x23, 0x2B, 0x2B, 
  0x01, 0x00, 0x2B, 0x2B, 0x2B, 0x2B, 
   // chunk: 1
   // chunk name: Grasslands
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
   // chunk: 2
   // chunk name: Lonley tree
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x21, 0x22, 0x00, 0x00, 
  0x00, 0x00, 0x24, 0x23, 0x01, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
   // chunk: 3
   // chunk name: House
  0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
  0x0A, 0x27, 0x27, 0x27, 0x27, 0x0A, 
  0x0A, 0x27, 0x27, 0x27, 0x27, 0x0A, 
  0x2C, 0x29, 0x2A, 0x29, 0x29, 0x2C, 
  0x0A, 0x01, 0x03, 0x02, 0x02, 0x0A, 
  0x0A, 0x01, 0x03, 0x02, 0x02, 0x0A, 
   // chunk: 4
   // chunk name: Shop
  0x0A, 0x0A, 0x0A, 0x0A, 0x01, 0x0A, 
  0x01, 0x0A, 0x27, 0x27, 0x27, 0x01, 
  0x0A, 0x02, 0x27, 0x28, 0x27, 0x03, 
  0x0A, 0x2C, 0x29, 0x2A, 0x29, 0x03, 
  0x01, 0x0A, 0x03, 0x03, 0x04, 0x03, 
  0x0A, 0x0B, 0x03, 0x03, 0x03, 0x03, 
   // chunk: 5
   // chunk name: Long Road
  0x01, 0x01, 0x01, 0x01, 0x21, 0x22, 
  0x02, 0x01, 0x01, 0x01, 0x24, 0x23, 
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x01, 0x21, 0x22, 0x01, 0x01, 0x01, 
  0x01, 0x24, 0x23, 0x01, 0x02, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
   // chunk: 6
   // chunk name: Pond
  0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 
  0x01, 0x0E, 0x16, 0x16, 0x0F, 0x2D, 
  0x01, 0x19, 0x1F, 0x1F, 0x15, 0x0F, 
  0x01, 0x19, 0x1F, 0x1F, 0x1F, 0x17, 
  0x01, 0x11, 0x13, 0x05, 0x1F, 0x17, 
  0x01, 0x02, 0x11, 0x05, 0x18, 0x10, 
};

PROGMEM const unsigned char bm_tileset[] = {
   // Bitmap Image. No transparency
   // Width: 16 Height: 16
   16, 16, 
   // Frame 0
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 1
   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,
   // Frame 2
   0xFF,   0xFF,   0xE7,   0xE7,   0x99,   0x99,   0xE7,   0xE7,   0xFF,   0xFF,   0xF9,   0xF3,   0xFF,   0xE3,   0xF1,   0xFF,
   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,   0xF3,   0xF3,   0xCC,   0xCC,   0xF3,   0xF3,   0xFF,
   // Frame 3
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 4
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 5
   0x80,   0x1E,   0xD6,   0xDE,   0x1E,   0x9E,   0x9E,   0x9E,   0x9E,   0x9E,   0x9E,   0x1E,   0xDE,   0xDA,   0x1E,   0x80,
   0x80,   0x1E,   0xD6,   0xDE,   0x1E,   0x9E,   0x9E,   0x9E,   0x9E,   0x9E,   0x9E,   0x1E,   0xDE,   0xDA,   0x1E,   0x80,
   // Frame 6
   0xCD,   0x00,   0xFE,   0xFA,   0xFE,   0xFE,   0xFE,   0x00,   0xCD,   0x00,   0xFE,   0xFA,   0xFE,   0xFE,   0xFE,   0x00,
   0x9B,   0x00,   0x3F,   0x3F,   0x3F,   0x2F,   0x3F,   0x00,   0x9B,   0x00,   0x3F,   0x3F,   0x3F,   0x2F,   0x3F,   0x00,
   // Frame 7
   0x00,   0xFF,   0xAB,   0x00,   0x62,   0x26,   0x22,   0x66,   0x22,   0x26,   0x62,   0x26,   0x22,   0xFF,   0xAB,   0x00,
   0x00,   0xFF,   0xAB,   0x00,   0x62,   0x26,   0x22,   0x66,   0x22,   0x26,   0x62,   0x26,   0x22,   0xFF,   0xAB,   0x00,
   // Frame 8
   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
   // Frame 9
   0xDF,   0xBF,   0x5E,   0xED,   0xF3,   0xF7,   0xEF,   0xDF,   0xBF,   0x7F,   0xBE,   0xDD,   0xEB,   0xF7,   0xEF,   0xDF,
   0xF7,   0xEF,   0xDF,   0xAE,   0x75,   0xFB,   0xF7,   0xEF,   0xDF,   0xBF,   0x5E,   0xED,   0xF3,   0xF7,   0xEF,   0xDF,
   // Frame 10
   0xFF,   0xFF,   0xFF,   0xFB,   0xFF,   0xFF,   0xBF,   0xFF,   0xFF,   0xFF,   0xFE,   0xFF,   0xFF,   0xFF,   0xF7,   0xFF,
   0xFF,   0xFB,   0xFF,   0xFF,   0xFF,   0xDF,   0xFF,   0x7F,   0xFF,   0xFF,   0xFF,   0xFD,   0xFF,   0xFF,   0xFF,   0xBF,
   // Frame 11
   0xFF,   0xFF,   0xFF,   0xFB,   0xFF,   0xFF,   0xBF,   0xC7,   0xDB,   0xDB,   0xDA,   0xD7,   0xC7,   0xFF,   0xF7,   0xFF,
   0xFF,   0xF9,   0xFA,   0xFA,   0xF9,   0xDF,   0xFF,   0x7F,   0xE3,   0xED,   0xED,   0xED,   0xF3,   0xFF,   0xFF,   0xBF,
   // Frame 12
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFD,   0xF1,   0xE9,   0xD5,   0xDB,   0xD7,   0xCF,   0xFF,   0xFF,   0xFF,
   0xFF,   0xE7,   0xEB,   0xED,   0xEA,   0xF4,   0xF8,   0xFE,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 13
   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,
   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,   0xFE,   0xF8,   0xC1,   0x03,   0xFF,   0x1C,   0x0E,   0xC7,
   // Frame 14
   0x3F,   0xCF,   0xF7,   0xFB,   0xFD,   0xFD,   0xFE,   0xFE,   0xFE,   0xFE,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x07,   0x01,   0xC0,   0xB0,   0x78,   0x78,   0x74,   0x76,   0x86,
   // Frame 15
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFD,   0xFD,   0xFB,   0xF7,   0xCF,   0x3F,
   0x86,   0x7A,   0xFC,   0xFC,   0x18,   0xE0,   0xC0,   0x01,   0x03,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 16
   0x61,   0x6E,   0x2E,   0x1E,   0x1E,   0x0D,   0x03,   0x80,   0xE0,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7F,   0x7F,   0x7F,   0x7F,   0xBF,   0xBF,   0xDF,   0xEF,   0xF3,   0xFC,
   // Frame 17
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xC0,   0x80,   0x03,   0x07,   0x18,   0x3F,   0x3F,   0x5E,   0x61,
   0xFC,   0xF3,   0xEF,   0xDF,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x7F,   0x7F,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 18
   0x1F,   0xEF,   0xF7,   0xF7,   0xEF,   0xC7,   0x3B,   0xBD,   0xDD,   0xDE,   0xDE,   0x1E,   0x6D,   0x73,   0x77,   0x77,
   0x8E,   0x71,   0xFB,   0xFB,   0x1B,   0xE0,   0xEF,   0x0F,   0x03,   0xC1,   0xF0,   0xF8,   0xFC,   0xFC,   0xFE,   0xFE,
   // Frame 19
   0x6D,   0x6E,   0x6E,   0x1E,   0xDD,   0xC1,   0xDD,   0xDE,   0xBE,   0x3E,   0xDE,   0xCD,   0xD3,   0xBF,   0x7F,   0xFF,
   0xFE,   0xFE,   0xFC,   0xFC,   0xF8,   0xF0,   0xC1,   0x03,   0x07,   0xF7,   0xF0,   0xEF,   0x1F,   0xDF,   0xEE,   0xF1,
   // Frame 20
   0x7F,   0x7F,   0x3F,   0x3F,   0x1F,   0x0F,   0x83,   0xC0,   0xF0,   0xF7,   0x07,   0xD8,   0xDF,   0xDF,   0x8E,   0x71,
   0xEE,   0xEE,   0xCE,   0xB6,   0x78,   0x7B,   0x7B,   0xBB,   0xBD,   0x1C,   0xE3,   0xF7,   0xEF,   0xEF,   0xC7,   0x38,
   // Frame 21
   0x71,   0x8E,   0xDF,   0xDF,   0xD8,   0x07,   0xF7,   0xF0,   0xC0,   0x83,   0x0F,   0x1F,   0x3F,   0x3F,   0x7F,   0x7F,
   0x38,   0xC7,   0xEF,   0xEF,   0xF7,   0xE3,   0x1C,   0xBD,   0xBB,   0x7B,   0x7B,   0x78,   0xB6,   0xCE,   0xDE,   0xDE,
   // Frame 22
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   0xEE,   0xEE,   0xEE,   0xC4,   0x38,   0xBC,   0xBE,   0x7E,   0x7E,   0x7E,   0x7E,   0x3C,   0xC0,   0xDC,   0xDE,   0xDE,
   // Frame 23
   0x38,   0xC7,   0xEF,   0xEF,   0x0E,   0xF5,   0xF3,   0x00,   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   0x86,   0x79,   0x7B,   0x7B,   0x30,   0xCF,   0xEF,   0x00,   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 24
   0x7B,   0x7B,   0x3B,   0x03,   0x3C,   0x7E,   0x7E,   0x7E,   0x7E,   0x7D,   0x3D,   0x1C,   0x23,   0x77,   0x77,   0x77,
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 25
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,   0x00,   0xF3,   0xF5,   0x0E,   0xEF,   0xEF,   0xC7,   0x38,
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,   0x00,   0xEF,   0xCF,   0x30,   0x7B,   0x7B,   0x79,   0x86,
   // Frame 26
   0x0C,   0xF3,   0xF7,   0xF7,   0xE3,   0xDC,   0x3F,   0xBF,   0xBF,   0xBF,   0xBF,   0x0E,   0xF1,   0xFB,   0xFB,   0xFB,
   0xFF,   0xFE,   0xFD,   0xFD,   0xFD,   0xF0,   0xEF,   0xDF,   0xDF,   0xDF,   0xDF,   0xC3,   0xBC,   0x7E,   0x7D,   0x7D,
   // Frame 27
   0xF7,   0xF7,   0xF7,   0xE3,   0x1C,   0xBF,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x3E,   0xCD,   0xF3,   0xFB,   0xFB,
   0x7D,   0x7D,   0xB1,   0x8E,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x7F,   0xBF,   0x8E,   0xB1,   0x7B,   0x7B,   0x7B,
   // Frame 28
   0xFB,   0xF7,   0xF7,   0xF3,   0x0C,   0xBF,   0xBF,   0xBF,   0xBF,   0x3F,   0xDE,   0xE1,   0xF7,   0xF7,   0xF3,   0x00,
   0x7B,   0x7D,   0x7D,   0xB8,   0xC7,   0xDF,   0xDF,   0xDF,   0xDF,   0xEF,   0xF0,   0xFD,   0xFD,   0xFD,   0xFE,   0xFF,
   // Frame 29
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x3D,   0x83,
   0x3E,   0x7E,   0x7E,   0x84,   0xB8,   0xBC,   0xBE,   0x9E,   0xCC,   0xE0,   0xEC,   0xF6,   0xF8,   0xFE,   0xFF,   0xFF,
   // Frame 30
   0x83,   0x3D,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   0xFF,   0xFF,   0xFE,   0xF8,   0xF6,   0xEC,   0xE0,   0xCC,   0x9E,   0xBE,   0xBC,   0xB8,   0x84,   0x7E,   0x7E,   0x3E,
   // Frame 31
   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,
   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,
   // Frame 32
   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,
   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,
   // Frame 33
   0xFF,   0xFF,   0x3F,   0xDF,   0x0F,   0xF7,   0xFB,   0xFB,   0x85,   0x31,   0x79,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,
   0x07,   0xF0,   0xCF,   0x1F,   0x7C,   0xF9,   0xF3,   0xE7,   0xEF,   0xDF,   0xDE,   0x9C,   0xBD,   0xBD,   0xBD,   0xBD,
   // Frame 34
   0xFE,   0xFE,   0xFE,   0xFC,   0x7C,   0x39,   0x85,   0xFD,   0xFB,   0xFB,   0x77,   0x0F,   0xDF,   0x3F,   0xFF,   0xFF,
   0xBD,   0xBD,   0x9C,   0xDE,   0xDE,   0xCF,   0xE7,   0xF7,   0xF3,   0xF9,   0x7C,   0x7F,   0x3F,   0x9F,   0xE0,   0x07,
   // Frame 35
   0xE7,   0xE7,   0xF7,   0xF7,   0xF7,   0xF3,   0xFB,   0x79,   0x7D,   0x7C,   0xBE,   0xBF,   0xDF,   0xEF,   0xF3,   0xFC,
   0x5E,   0x6E,   0xBE,   0xC6,   0xF6,   0xEA,   0xD6,   0xD7,   0xDF,   0xDE,   0xED,   0xF3,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 36
   0xFC,   0xF3,   0xEF,   0xDF,   0xBF,   0xBC,   0x79,   0x7B,   0x73,   0xF7,   0xF7,   0xF7,   0xF7,   0xF7,   0xF7,   0xF7,
   0xFF,   0xFF,   0xFF,   0xFF,   0xF3,   0xED,   0xDE,   0xDF,   0xD7,   0xD6,   0xEA,   0xF6,   0xC6,   0xBE,   0x6E,   0x5E,
   // Frame 37
   0xF7,   0xF7,   0x37,   0xD3,   0x09,   0xF1,   0xF8,   0xF8,   0x85,   0x31,   0x79,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,
   0x06,   0xF0,   0xCF,   0x1F,   0x7C,   0xF9,   0xF3,   0xE7,   0xEF,   0xDF,   0xDE,   0x9C,   0xBD,   0xBD,   0xBD,   0xBD,
   // Frame 38
   0xFE,   0xFE,   0xFE,   0xFC,   0x7C,   0x39,   0x85,   0xFD,   0xFA,   0xF8,   0x71,   0x03,   0xD7,   0x37,   0xF7,   0xF7,
   0xBD,   0xBD,   0x9C,   0xDE,   0xDE,   0xCF,   0xE7,   0xF7,   0xF3,   0xF9,   0x7C,   0x3F,   0x9F,   0xCF,   0xE0,   0x06,
   // Frame 39
   0x02,   0xF2,   0xA2,   0x52,   0xA2,   0x52,   0xF2,   0x02,   0x02,   0xF2,   0xA2,   0x52,   0xA2,   0x52,   0xF2,   0x02,
   0x00,   0x3F,   0x6A,   0x55,   0x6A,   0x55,   0x3F,   0x00,   0x00,   0x3F,   0x6A,   0x55,   0x6A,   0x55,   0x3F,   0x00,
   // Frame 40
   0x02,   0x72,   0x22,   0x52,   0x22,   0x52,   0x72,   0x02,   0x02,   0x72,   0x22,   0x52,   0x22,   0x52,   0x72,   0x02,
   0x7F,   0x53,   0x55,   0x65,   0x7F,   0x41,   0x77,   0x41,   0x7F,   0x63,   0x5D,   0x63,   0x7F,   0x41,   0x75,   0x7B,
   // Frame 41
   0x00,   0xFD,   0xFD,   0xFD,   0xFD,   0x05,   0x15,   0x15,   0x15,   0x15,   0x05,   0xFD,   0xFD,   0xFD,   0xFD,   0x00,
   0x00,   0x6F,   0x6F,   0x6F,   0x6C,   0x1A,   0x6A,   0x6A,   0x6A,   0x6A,   0x1A,   0x6C,   0x6F,   0x6F,   0x6F,   0x00,
   // Frame 42
   0xFB,   0xFB,   0x03,   0xF3,   0x73,   0x03,   0xF3,   0xF3,   0xF3,   0xF3,   0x03,   0xF3,   0xF3,   0x03,   0xFB,   0xFB,
   0x7F,   0x7F,   0x80,   0xBC,   0xB9,   0x81,   0xB8,   0xBF,   0xBF,   0xBF,   0x80,   0xBF,   0xBF,   0x80,   0x7F,   0x7F,
   // Frame 43
   0xFF,   0x83,   0x7B,   0xD7,   0xAF,   0x47,   0x1B,   0xED,   0xED,   0x1B,   0x47,   0xAF,   0xD7,   0x7B,   0x83,   0xFF,
   0xFF,   0xE3,   0xED,   0xEE,   0xEA,   0xC4,   0xB8,   0xBC,   0xB0,   0xB8,   0xC0,   0xEA,   0xEE,   0xED,   0xE3,   0xFF,
   // Frame 44
   0xFF,   0x0F,   0xB7,   0x4B,   0x4B,   0x37,   0x0F,   0xFF,   0xFF,   0x0F,   0xB7,   0x4B,   0x4B,   0x37,   0x0F,   0xFF,
   0xFF,   0xC0,   0xAA,   0x80,   0xBF,   0x80,   0xC0,   0xFF,   0xFF,   0xC0,   0xAA,   0x80,   0xBF,   0x80,   0xC0,   0xFF,
   // Frame 45
   0x3F,   0xDF,   0xEF,   0xF7,   0xFB,   0xFD,   0xFD,   0xFD,   0xFD,   0xA9,   0x55,   0xAB,   0x57,   0xAF,   0x5F,   0x3F,
   0xE0,   0x8A,   0x55,   0x2B,   0x7F,   0x2B,   0x55,   0x2A,   0x55,   0x2B,   0x57,   0x2A,   0x81,   0x80,   0xC0,   0xE0,
};




#define TOTAL_REGIONS     6
#define LEVEL_CHUNK_W    32
#define LEVEL_CHUNK_H    32


const unsigned char PROGMEM regions[] = 
{
  // region: 0
  // region name: Mountains
  0x00, 0x00, 0x10, 0x0F, 
  // region: 1
  // region name: Forest
  0x10, 0x00, 0x10, 0x0F, 
  // region: 2
  // region name: Lakeside
  0x10, 0x0F, 0x10, 0x0F, 
  // region: 3
  // region name: apple grow
  0x0A, 0x10, 0x05, 0x04, 
  // region: 4
  // region name: River
  0x00, 0x00, 0x05, 0x05, 
  // region: 5
  // region name: Grasslands
  0x00, 0x0F, 0x10, 0x0F, 
};


const unsigned char PROGMEM solid_map[] = 
{
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xFF, 0xFF, 
  0xFD, 0xFF, 0x00, 0x00, 
  0x09, 0x82, 0x00, 0x00, 
  0x09, 0xA2, 0x00, 0x00, 
  0x0B, 0x82, 0x00, 0x00, 
  0xE1, 0x83, 0x00, 0x00, 
  0x05, 0x00, 0x00, 0x00, 
  0x77, 0xFF, 0x00, 0x00, 
  0x75, 0x80, 0x00, 0x00, 
  0x01, 0x9B, 0x00, 0x00, 
  0x7F, 0x91, 0x00, 0x00, 
  0x41, 0x91, 0x00, 0x00, 
  0x01, 0xBB, 0x00, 0x00, 
  0x49, 0x81, 0x00, 0x00, 
  0x49, 0x80, 0x00, 0x00, 
  0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
};



byte getChunk(const Point &chunk_pos);
bool getChunkBit(const byte &chunk_x, const byte &chunk_y);
byte getTileInChunk(const byte &chunk, const Point &tile_pos);
Point world_to_chunk(const Point &world_pos);
bool getSolid(const Point &world_pos);
byte getTileID(const Point &world_pos);
byte getRegion(const Point &chunk_pos);



byte getRegion(const Point &chunk_pos)
{
  for (byte i = 0; i < TOTAL_REGIONS; i++)
  {
      Rect reg = {.x = pgm_read_byte(regions + i * 4), .y = pgm_read_byte(regions + 1 + i * 4),
                .width = pgm_read_byte(regions + 2 + i * 4), .height = pgm_read_byte(regions + 3 + i * 4) };
      if (arduboy.collide(chunk_pos, reg)) return i;
  }
  return 255;     // error
}



byte getTileID(const Point &world_pos)
{
    Point chunk_pos = { .x = world_pos.x / 96, .y = world_pos.y / 96 };
    byte chunk = getChunk(chunk_pos);
    byte tile = getTileInChunk(chunk, world_to_chunk(world_pos));
    
    switch(tile)
    {
      case 31: tile += waterframe; break;
      case 32: tile -= waterframe; break;
    }
    
    return tile;
}



bool getChunkBit(const byte &chunk_x, const byte &chunk_y)
{
  if (chunk_x < 0 || chunk_x >= LEVEL_CHUNK_W
  || chunk_y < 0 || chunk_y >= LEVEL_CHUNK_H)
    return 1;
    
  byte x = chunk_x / 8;           // 8 is number of chunks per byte
  byte y = chunk_y * 4;           // 4 is number of bytes per row
  byte i = chunk_x % 8;

  byte b = (pgm_read_byte(solid_map + x + y) & _BV(i));
  return (b > 0);
}



byte getTileInChunk(const byte &chunk, const Point &tile_pos)
{
  return pgm_read_byte(chunks + ((chunk & 0x7F) * 36) + tile_pos.x + tile_pos.y * 6);
}



bool getSolid(const Point &world_pos)
{
  return (getTileID(world_pos) >= 14);
}



bool getSolid(const int &world_x, const int &world_y)
{
  Point world_pos = {.x = world_x, .y = world_y };
  return (getTileID(world_pos) >= 14);
}



Point world_to_chunk(const Point &world_pos)
{
    Point out = {.x = (world_pos.x % 96) / 16, .y = (world_pos.y % 96) / 16 };
    return out;
}



// getChunk
// Returns a value greater than 127 if the chunk was specifically placed.
// If the chunk is part of a region the returned value will be
// less than 128.
// To get the actual chunk value of a specific chunk, AND (&) the returned
// chunk with 0x7F (B01111111)
byte getChunk(const Point &chunk_pos)
{
    // specific chunks
    switch (chunk_pos.x + chunk_pos.y * 32)
    {
        case 778: return 130; break; // Lonley tree
        case 874: return 130; break; // Lonley tree
        case 834: return 130; break; // Lonley tree
        case 901: return 130; break; // Lonley tree
        case 802: return 131; break; // House
        case 868: return 131; break; // House
        case 865: return 131; break; // House
        case 805: return 132; break; // Shop
        case 705: return 132; break; // Shop
        case 781: return 131; break; // House
        case 655: return 133; break; // Long Road
        case 654: return 133; break; // Long Road
        case 653: return 133; break; // Long Road
        case 652: return 133; break; // Long Road
        case 651: return 133; break; // Long Road
        case 650: return 133; break; // Long Road
        case 649: return 133; break; // Long Road
        case 481: return 131; break; // House
        case 648: return 133; break; // Long Road
        case 647: return 133; break; // Long Road
        case 646: return 133; break; // Long Road
        case 645: return 133; break; // Long Road
        case 644: return 133; break; // Long Road
        case 643: return 133; break; // Long Road
        case 551: return 131; break; // House
        case 549: return 131; break; // House
        case 516: return 131; break; // House
        case 550: return 130; break; // Lonley tree
        case 801: return 134; break; // Pond
        case 514: return 134; break; // Pond
        case 782: return 134; break; // Pond
        case 519: return 134; break; // Pond
    }


    // regions
    switch (getRegion(chunk_pos))
    {
        case 0:  // Mountains
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 1;
            }

            else
            {
                return 0;
            }
        } break;
        case 1:  // Forest
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 1;
            }

            else
            {
                return 0;
            }
        } break;
        case 2:  // Lakeside
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 1;
            }

            else
            {
                return 0;
            }
        } break;
        case 3:  // apple grow
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 2;
            }

            else
            {
                return 3;
            }
        } break;
        case 4:  // River
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 1;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                }
            }
        } break;
        case 5:  // Grasslands
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 1;
            }

            else
            {
                return 0;
            }
        } break;

    }
    return 0; // default chunk
}



        
void drawTiles()
{
  int cx = (cam.x >> 4) << 4;
  int cy = (cam.y >> 4) << 4;
  for (int x = 0; x <= 128; x += 16)
  {
     for (int y = 0; y <= 64; y += 16)
     {
        int ccx = cx + x;
        int ccy = cy + y;
        Point pos = {.x = cam.x + x, .y = cam.y + y };
        byte tile = getTileID(pos);
        sprites.drawOverwrite(ccx - cam.x, ccy - cam.y, bm_tileset, tile);
     }
  }
}
        
#endif

