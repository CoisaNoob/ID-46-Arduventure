
#ifndef WORLDDATA_H
#define WORLDDATA_H
/// The below code was generated by
/// the Arduventure World Editor
/// created by Gavin Atkin 2016-2017

const unsigned char PROGMEM chunks[] = 
{
  // number of chunks: 36
  // number of tiles in chunks: 36
  // space used by chunks: 1296 bytes
  // chunk: 0
  // chunk name: emptygrass
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1B, 0x1C, 0x00, 0x00, 0x00, 
  0x00, 0x1E, 0x1D, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x02, 0x00, 0x1B, 0x1C, 
  0x01, 0x00, 0x00, 0x00, 0x1E, 0x1D, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
  // chunk: 1
  // chunk name: solidtrees
  0x00, 0x1B, 0x1C, 0x01, 0x00, 0x02, 
  0x1B, 0x20, 0x1F, 0x1C, 0x1B, 0x1C, 
  0x1E, 0x1D, 0x1E, 0x1F, 0x20, 0x1D, 
  0x1B, 0x1C, 0x00, 0x1E, 0x1F, 0x1C, 
  0x1E, 0x1D, 0x1B, 0x1C, 0x1E, 0x1D, 
  0x01, 0x00, 0x1E, 0x1D, 0x00, 0x01, 
  // chunk: 2
  // chunk name: shop
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
  0x01, 0x22, 0x21, 0x21, 0x00, 0x00, 
  0x26, 0x23, 0x24, 0x23, 0x26, 0x00, 
  0x26, 0x25, 0x03, 0x25, 0x26, 0x00, 
  0x26, 0x26, 0x03, 0x26, 0x26, 0x04, 
  0x00, 0x01, 0x04, 0x00, 0x01, 0x00, 
  // chunk: 3
  // chunk name: Solid Right
  0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 
  0x00, 0x00, 0x00, 0x00, 0x0C, 0x0A, 
  0x00, 0x00, 0x00, 0x04, 0x0F, 0x09, 
  0x00, 0x01, 0x00, 0x00, 0x14, 0x0F, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 
  // chunk: 4
  // chunk name: Solid Top
  0x0F, 0x09, 0x00, 0x08, 0x10, 0x0E, 
  0x14, 0x0F, 0x09, 0x13, 0x15, 0x16, 
  0x00, 0x14, 0x0F, 0x0E, 0x00, 0x01, 
  0x00, 0x04, 0x14, 0x16, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x04, 0x00, 0x01, 
  // chunk: 5
  // chunk name: Solid Left
  0x0D, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x0B, 0x12, 0x0D, 0x01, 0x00, 0x00, 
  0x00, 0x04, 0x13, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x13, 0x00, 0x00, 0x00, 
  0x10, 0x10, 0x0E, 0x00, 0x04, 0x00, 
  0x15, 0x15, 0x16, 0x00, 0x00, 0x01, 
  // chunk: 6
  // chunk name: S Left Right
  0x0D, 0x04, 0x00, 0x00, 0x00, 0x0C, 
  0x13, 0x00, 0x02, 0x00, 0x04, 0x11, 
  0x13, 0x00, 0x01, 0x02, 0x00, 0x11, 
  0x13, 0x04, 0x00, 0x01, 0x00, 0x11, 
  0x0E, 0x00, 0x02, 0x04, 0x00, 0x0F, 
  0x16, 0x00, 0x00, 0x00, 0x01, 0x14, 
  // chunk: 7
  // chunk name: unnamed
  0x0A, 0x08, 0x10, 0x10, 0x10, 0x0E, 
  0x04, 0x13, 0x15, 0x15, 0x15, 0x16, 
  0x00, 0x13, 0x00, 0x00, 0x01, 0x00, 
  0x08, 0x0E, 0x04, 0x00, 0x00, 0x00, 
  0x0E, 0x16, 0x00, 0x00, 0x02, 0x00, 
  0x16, 0x00, 0x00, 0x02, 0x00, 0x00, 
  // chunk: 8
  // chunk name: Solid Bottom
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
  0x00, 0x0C, 0x12, 0x0D, 0x00, 0x00, 
  0x0C, 0x0A, 0x01, 0x0B, 0x12, 0x0D, 
  // chunk: 9
  // chunk name: S Bottom Right
  0x00, 0x02, 0x00, 0x04, 0x00, 0x0C, 
  0x00, 0x00, 0x01, 0x00, 0x01, 0x11, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x11, 
  0x00, 0x00, 0x04, 0x0C, 0x12, 0x0A, 
  0x01, 0x00, 0x00, 0x11, 0x01, 0x08, 
  0x0C, 0x12, 0x12, 0x0A, 0x00, 0x13, 
  // chunk: 10
  // chunk name: S Top Bottom
  0x0F, 0x10, 0x10, 0x10, 0x10, 0x0E, 
  0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x04, 0x01, 0x00, 0x00, 0x01, 
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
  0x0C, 0x12, 0x12, 0x12, 0x12, 0x0D, 
  // chunk: 11
  // chunk name: S Up right bott
  0x0F, 0x10, 0x10, 0x10, 0x09, 0x0B, 
  0x14, 0x15, 0x15, 0x15, 0x0F, 0x09, 
  0x00, 0x04, 0x00, 0x00, 0x14, 0x11, 
  0x00, 0x00, 0x01, 0x00, 0x0C, 0x0A, 
  0x02, 0x00, 0x00, 0x00, 0x11, 0x08, 
  0x0C, 0x12, 0x12, 0x12, 0x0A, 0x13, 
  // chunk: 12
  // chunk name: S Bottom left
  0x12, 0x0D, 0x00, 0x00, 0x04, 0x00, 
  0x08, 0x0E, 0x01, 0x00, 0x00, 0x00, 
  0x13, 0x16, 0x00, 0x01, 0x00, 0x00, 
  0x0B, 0x0D, 0x04, 0x00, 0x00, 0x04, 
  0x09, 0x0B, 0x12, 0x0D, 0x01, 0x00, 
  0x11, 0x01, 0x00, 0x0B, 0x12, 0x0D, 
  // chunk: 13
  // chunk name: S Left bottom r
  0x0D, 0x00, 0x02, 0x00, 0x04, 0x0C, 
  0x13, 0x04, 0x00, 0x01, 0x00, 0x11, 
  0x0B, 0x12, 0x0D, 0x00, 0x00, 0x11, 
  0x00, 0x08, 0x0E, 0x00, 0x0C, 0x0A, 
  0x09, 0x13, 0x16, 0x01, 0x11, 0x08, 
  0x11, 0x0B, 0x12, 0x12, 0x0A, 0x13, 
  // chunk: 14
  // chunk name: S bottom left u
  0x0A, 0x08, 0x10, 0x10, 0x10, 0x0E, 
  0x08, 0x0E, 0x15, 0x15, 0x15, 0x16, 
  0x13, 0x16, 0x04, 0x00, 0x00, 0x00, 
  0x0B, 0x0D, 0x0C, 0x12, 0x0D, 0x01, 
  0x09, 0x0B, 0x0A, 0x08, 0x0E, 0x00, 
  0x11, 0x01, 0x00, 0x0B, 0x12, 0x0D, 
  // chunk: 15
  // chunk name: unnamed
  0x0A, 0x00, 0x00, 0x00, 0x00, 0x0B, 
  0x02, 0x00, 0x04, 0x01, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x09, 0x00, 0x00, 0x00, 0x01, 0x08, 
  0x11, 0x00, 0x02, 0x00, 0x04, 0x13, 
  // chunk: 16
  // chunk name: pond
  0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x08, 0x10, 0x10, 0x09, 0x00, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x00, 
  0x01, 0x13, 0x1A, 0x19, 0x11, 0x01, 
  0x00, 0x0B, 0x12, 0x12, 0x0A, 0x00, 
  0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 
  // chunk: 17
  // chunk name: Stairs
  0x0F, 0x10, 0x10, 0x07, 0x10, 0x0E, 
  0x14, 0x15, 0x15, 0x07, 0x15, 0x16, 
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 
  // chunk: 18
  // chunk name: CliffHouse
  0x0A, 0x00, 0x00, 0x01, 0x00, 0x0B, 
  0x02, 0x21, 0x21, 0x21, 0x00, 0x00, 
  0x00, 0x23, 0x24, 0x23, 0x01, 0x00, 
  0x00, 0x25, 0x03, 0x25, 0x00, 0x01, 
  0x09, 0x00, 0x04, 0x00, 0x00, 0x08, 
  0x11, 0x02, 0x00, 0x00, 0x01, 0x13, 
  // chunk: 19
  // chunk name: rsolidright
  0x08, 0x10, 0x09, 0x00, 0x01, 0x00, 
  0x13, 0x19, 0x0F, 0x10, 0x10, 0x10, 
  0x13, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 
  0x0B, 0x0D, 0x1A, 0x19, 0x19, 0x1A, 
  0x00, 0x0B, 0x12, 0x12, 0x12, 0x12, 
  0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 
  // chunk: 20
  // chunk name: rstop
  0x01, 0x13, 0x19, 0x1A, 0x0F, 0x09, 
  0x00, 0x13, 0x1A, 0x19, 0x19, 0x11, 
  0x02, 0x13, 0x19, 0x1A, 0x1A, 0x11, 
  0x00, 0x13, 0x1A, 0x19, 0x0C, 0x0A, 
  0x00, 0x0B, 0x12, 0x12, 0x0A, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 
  // chunk: 21
  // chunk name: rstopright
  0x01, 0x13, 0x19, 0x1A, 0x0F, 0x09, 
  0x00, 0x13, 0x1A, 0x19, 0x1A, 0x0F, 
  0x08, 0x0E, 0x1A, 0x19, 0x19, 0x19, 
  0x13, 0x1A, 0x19, 0x1A, 0x1A, 0x19, 
  0x0B, 0x12, 0x0D, 0x19, 0x0C, 0x12, 
  0x00, 0x01, 0x0B, 0x12, 0x0A, 0x00, 
  // chunk: 22
  // chunk name: rsleft
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x10, 0x10, 0x10, 0x09, 0x00, 0x01, 
  0x19, 0x1A, 0x1A, 0x0F, 0x09, 0x00, 
  0x1A, 0x19, 0x1A, 0x19, 0x11, 0x00, 
  0x12, 0x12, 0x0D, 0x1A, 0x0F, 0x09, 
  0x01, 0x00, 0x0B, 0x12, 0x12, 0x0A, 
  // chunk: 23
  // chunk name: rsleftright
  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 
  0x10, 0x10, 0x09, 0x08, 0x10, 0x10, 
  0x19, 0x1A, 0x0F, 0x0E, 0x19, 0x1A, 
  0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 
  0x12, 0x0D, 0x1A, 0x19, 0x0C, 0x12, 
  0x00, 0x0B, 0x12, 0x12, 0x0A, 0x04, 
  // chunk: 24
  // chunk name: rslefttop
  0x08, 0x0E, 0x19, 0x1A, 0x11, 0x01, 
  0x0E, 0x19, 0x19, 0x19, 0x11, 0x00, 
  0x19, 0x1A, 0x19, 0x1A, 0x11, 0x00, 
  0x1A, 0x19, 0x1A, 0x0C, 0x0A, 0x02, 
  0x12, 0x12, 0x12, 0x0A, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 
  // chunk: 25
  // chunk name: rslefttopright
  0x08, 0x0E, 0x19, 0x1A, 0x0F, 0x09, 
  0x0E, 0x1A, 0x19, 0x1A, 0x19, 0x0F, 
  0x19, 0x19, 0x0C, 0x0D, 0x1A, 0x19, 
  0x19, 0x0C, 0x0A, 0x0B, 0x0D, 0x1A, 
  0x12, 0x0A, 0x00, 0x01, 0x0B, 0x12, 
  0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 
  // chunk: 26
  // chunk name: rsbottom
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
  0x00, 0x08, 0x10, 0x10, 0x09, 0x00, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x00, 
  0x01, 0x13, 0x1A, 0x19, 0x11, 0x01, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x00, 
  0x00, 0x13, 0x1A, 0x19, 0x11, 0x04, 
  // chunk: 27
  // chunk name: rsbottomright
  0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 
  0x00, 0x13, 0x19, 0x1A, 0x19, 0x1A, 
  0x01, 0x13, 0x1A, 0x19, 0x1A, 0x19, 
  0x00, 0x13, 0x1A, 0x19, 0x1A, 0x0C, 
  0x01, 0x13, 0x19, 0x1A, 0x0C, 0x0A, 
  // chunk: 28
  // chunk name: rsleftright
  0x01, 0x13, 0x19, 0x1A, 0x11, 0x00, 
  0x00, 0x13, 0x1A, 0x19, 0x11, 0x04, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x00, 
  0x02, 0x13, 0x1A, 0x19, 0x11, 0x00, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x01, 
  0x00, 0x13, 0x1A, 0x19, 0x11, 0x00, 
  // chunk: 29
  // chunk name: rstoprightbotto
  0x00, 0x13, 0x19, 0x1A, 0x0F, 0x09, 
  0x01, 0x13, 0x1A, 0x19, 0x1A, 0x0F, 
  0x00, 0x13, 0x19, 0x1A, 0x19, 0x1A, 
  0x00, 0x13, 0x1A, 0x19, 0x1A, 0x19, 
  0x02, 0x13, 0x19, 0x1A, 0x19, 0x0C, 
  0x00, 0x13, 0x1A, 0x19, 0x0C, 0x0A, 
  // chunk: 30
  // chunk name: rsleftbottom
  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 
  0x10, 0x10, 0x10, 0x10, 0x09, 0x04, 
  0x19, 0x1A, 0x19, 0x1A, 0x11, 0x00, 
  0x19, 0x1A, 0x19, 0x1A, 0x11, 0x01, 
  0x0D, 0x19, 0x1A, 0x19, 0x11, 0x00, 
  0x0B, 0x0D, 0x19, 0x1A, 0x11, 0x00, 
  // chunk: 31
  // chunk name: rseftbottomrigh
  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
  0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 
  0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 
  0x0D, 0x19, 0x1A, 0x19, 0x19, 0x0C, 
  0x0B, 0x0D, 0x1A, 0x19, 0x0C, 0x0A, 
  // chunk: 32
  // chunk name: rstopleftbottom
  0x08, 0x0E, 0x19, 0x1A, 0x11, 0x01, 
  0x0E, 0x19, 0x1A, 0x19, 0x11, 0x00, 
  0x19, 0x1A, 0x19, 0x1A, 0x11, 0x02, 
  0x1A, 0x19, 0x1A, 0x19, 0x11, 0x00, 
  0x0D, 0x1A, 0x19, 0x1A, 0x11, 0x04, 
  0x0B, 0x0D, 0x1A, 0x19, 0x11, 0x00, 
  // chunk: 33
  // chunk name: rsall
  0x08, 0x0E, 0x19, 0x1A, 0x0F, 0x09, 
  0x0E, 0x1A, 0x19, 0x1A, 0x19, 0x0F, 
  0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 
  0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 
  0x0D, 0x19, 0x1A, 0x19, 0x1A, 0x0C, 
  0x0B, 0x0D, 0x19, 0x1A, 0x0C, 0x0A, 
  // chunk: 34
  // chunk name: Brdge
  0x00, 0x13, 0x19, 0x19, 0x11, 0x00, 
  0x01, 0x13, 0x1A, 0x1A, 0x11, 0x00, 
  0x00, 0x13, 0x19, 0x19, 0x11, 0x00, 
  0x04, 0x06, 0x06, 0x06, 0x06, 0x04, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x01, 
  0x00, 0x13, 0x19, 0x1A, 0x11, 0x00, 
  // chunk: 35
  // chunk name: unnamed
  0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
  0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
};




#define TOTAL_REGIONS     3
#define LEVEL_CHUNK_W    32
#define LEVEL_CHUNK_H    32


const unsigned char PROGMEM regions[] = 
{
  // region: 0
  // region name: Empty Defined
  0x02, 0x02, 0x08, 0x08, 
  // region: 1
  // region name: River
  0x0F, 0x00, 0x10, 0x10, 
  // region: 2
  // region name: binary region
  0x00, 0x00, 0x20, 0x20, 
};


const unsigned char PROGMEM solid_map[] = 
{
  0xFF, 0x8F, 0x00, 0x00, 
  0x2B, 0x8C, 0x03, 0x00, 
  0xA1, 0x89, 0x06, 0x00, 
  0x09, 0x09, 0x0A, 0x00, 
  0x85, 0x19, 0x0F, 0x00, 
  0xA5, 0x58, 0x0F, 0x00, 
  0xED, 0x31, 0x09, 0x00, 
  0x01, 0x01, 0x09, 0x00, 
  0x91, 0xE1, 0x0F, 0x00, 
  0x03, 0x30, 0x07, 0x00, 
  0x03, 0x38, 0x05, 0x00, 
  0x7F, 0x1E, 0x07, 0x00, 
  0xE0, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
};



byte getChunk(const Point &chunk_pos);
bool getChunkBit(const byte &chunk_x, const byte &chunk_y);
byte getTileInChunk(const byte &chunk, const Point &tile_pos);
Point world_to_chunk(const Point &world_pos);
bool getSolid(const Point &world_pos);
byte getTileID(const Point &world_pos);
byte getRegion(const Point &chunk_pos);



byte getRegion(const Point &chunk_pos)
{
  for (byte i = 0; i < TOTAL_REGIONS; i++)
  {
      Rect reg = {.x = pgm_read_byte(regions + i * 4), .y = pgm_read_byte(regions + 1 + i * 4),
                .width = pgm_read_byte(regions + 2 + i * 4), .height = pgm_read_byte(regions + 3 + i * 4) };
      if (arduboy.collide(chunk_pos, reg)) return i;
  }
  return 255;     // error
}



byte getTileID(const Point &world_pos)
{
    Point chunk_pos = { .x = world_pos.x / 96, .y = world_pos.y / 96 };
    byte chunk = getChunk(chunk_pos);
    byte tile = getTileInChunk(chunk, world_to_chunk(world_pos));
    
    switch(tile)
    {
      case 25: tile += waterframe; break;
      case 26: tile -= waterframe; break;
    }
    
    return tile;
}



bool getChunkBit(const byte &chunk_x, const byte &chunk_y)
{
  if (chunk_x < 0 || chunk_x >= LEVEL_CHUNK_W
  || chunk_y < 0 || chunk_y >= LEVEL_CHUNK_H)
    return 1;
    
  byte x = chunk_x / 8;           // 8 is number of chunks per byte
  byte y = chunk_y * 4;           // 4 is number of bytes per row
  byte i = chunk_x % 8;

  byte b = (pgm_read_byte(solid_map + x + y) & _BV(i));
  return (b > 0);
}



byte getTileInChunk(const byte &chunk, const Point &tile_pos)
{
  return pgm_read_byte(chunks + ((chunk & 0x7F) * 36) + tile_pos.x + tile_pos.y * 6);
}



bool getSolid(const Point &world_pos)
{
  return (getTileID(world_pos) >= 8);
}



bool getSolid(const int &world_x, const int &world_y)
{
  Point world_pos = {.x = world_x, .y = world_y };
  return (getTileID(world_pos) >= 8);
}



Point world_to_chunk(const Point &world_pos)
{
    Point out = {.x = (world_pos.x % 96) / 16, .y = (world_pos.y % 96) / 16 };
    return out;
}



// getChunk
// Returns a value greater than 127 if the chunk was specifically placed.
// If the chunk is part of a region the returned value will be
// less than 128.
// To get the actual chunk value of a specific chunk, AND (&) the returned
// chunk with 0x7F (B01111111)
byte getChunk(const Point &chunk_pos)
{
    // specific chunks
    switch (chunk_pos.x + chunk_pos.y * 32)
    {
        case 67: return 136; break; // Solid Bottom
        case 37: return 136; break; // Solid Bottom
        case 132: return 144; break; // pond
        case 102: return 144; break; // pond
        case 39: return 136; break; // Solid Bottom
        case 295: return 145; break; // Stairs
        case 229: return 145; break; // Stairs
        case 193: return 131; break; // Solid Right
        case 161: return 131; break; // Solid Right
        case 129: return 131; break; // Solid Right
        case 289: return 131; break; // Solid Right
        case 225: return 130; break; // shop
        case 194: return 146; break; // CliffHouse
        case 227: return 145; break; // Stairs
        case 257: return 144; break; // pond
        case 207: return 129; break; // solidtrees
        case 80: return 130; break; // shop
        case 50: return 129; break; // solidtrees
        case 78: return 129; break; // solidtrees
        case 46: return 129; break; // solidtrees
        case 113: return 162; break; // Brdge
        case 208: return 162; break; // Brdge
        case 270: return 147; break; // rsolidright
        case 40: return 136; break; // Solid Bottom
        case 70: return 163; break; // unnamed
        case 101: return 145; break; // Stairs
    }


    // regions
    switch (getRegion(chunk_pos))
    {
        case 0:  // Empty Defined
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 15;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 0; break;
                    case 1: return 3; break;
                    case 2: return 4; break;
                    case 4: return 5; break;
                    case 5: return 6; break;
                    case 6: return 7; break;
                    case 8: return 8; break;
                    case 9: return 9; break;
                    case 10: return 10; break;
                    case 11: return 11; break;
                    case 12: return 12; break;
                    case 13: return 13; break;
                    case 14: return 14; break;
                }
            }
        } break;
        case 1:  // River
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 0;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 16; break;
                    case 1: return 19; break;
                    case 2: return 20; break;
                    case 3: return 21; break;
                    case 4: return 22; break;
                    case 5: return 23; break;
                    case 6: return 24; break;
                    case 7: return 25; break;
                    case 8: return 26; break;
                    case 9: return 27; break;
                    case 10: return 28; break;
                    case 11: return 29; break;
                    case 12: return 30; break;
                    case 13: return 31; break;
                    case 14: return 32; break;
                    case 15: return 33; break;
                }
            }
        } break;
        case 2:  // binary region
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        } break;

    }
    return 0; // default chunk
}



        
void drawTiles()
{
  int cx = (cam.x >> 4) << 4;
  int cy = (cam.y >> 4) << 4;
  for (int x = 0; x <= 128; x += 16)
  {
     for (int y = 0; y <= 64; y += 16)
     {
        int ccx = cx + x;
        int ccy = cy + y;
        Point pos = {.x = cam.x + x, .y = cam.y + y };
        byte tile = getTileID(pos);
        sprites.drawOverwrite(ccx - cam.x, ccy - cam.y, bm_tileset, tile);
     }
  }
}
        
#endif

